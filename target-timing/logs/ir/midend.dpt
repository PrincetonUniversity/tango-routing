// after phase: midendmemop SequenceNumberManager_next(int<<32>> curr,int<<32>> inc)
 {return curr+inc;
}

memop SequenceNumberManager_get_curr(int<<32>> curr,int<<32>> inc)
 {return curr;
}

global Array.t<<32>> start_time = Array.create(1);


global Array.t<<32>> application_packet_counter = Array.create(1);


global Array.t<<32>> outgoing_book_signature_manager_0 = Array.create(2048);


global Array.t<<32>> outgoing_book_signature_manager_1 = Array.create(2048);


global Array.t<<32>> outgoing_metric_signature_manager_0 = Array.create(16);


global Array.t<<32>> outgoing_metric_signature_manager_1 = Array.create(16);


global Array.t<<32>> num_pkt_finishes = Array.create(1);


global Array.t<<32>> pkt_finish_times = Array.create(128);


entry event dummy_traffic(int<<48>> eth_header_0,int<<48>> eth_header_1,int<<16>> eth_header_2,int<<8>> ip_header_0,int<<8>> ip_header_1,int<<16>> ip_header_2,int<<16>> ip_header_3,int<<16>> ip_header_4,int<<8>> ip_header_5,int<<8>> ip_header_6,int<<16>> ip_header_7,int<<32>> ip_header_8,int<<32>> ip_header_9,int<<16>> udp_header_0,int<<16>> udp_header_1,int<<16>> udp_header_2,int<<16>> udp_header_3);

event set_signature(int<<48>> eth_header_0,int<<48>> eth_header_1,int<<16>> eth_header_2,int<<32>> ip_header_0,int<<16>> ip_header_1,int<<8>> ip_header_2,int<<8>> ip_header_3,int<<64>> ip_header_4,int<<64>> ip_header_5,int<<64>> ip_header_6,int<<64>> ip_header_7,int<<16>> udp_header_0,int<<16>> udp_header_1,int<<16>> udp_header_2,int<<16>> udp_header_3,int<<8>> sig_type,int<<16>> sig_idx,int<<8>> block_idx,int<<32>> curr_signature,int<<32>> next_signature);

event set_next_signature(int<<48>> eth_header_0,int<<48>> eth_header_1,int<<16>> eth_header_2,int<<32>> ip_header_0,int<<16>> ip_header_1,int<<8>> ip_header_2,int<<8>> ip_header_3,int<<64>> ip_header_4,int<<64>> ip_header_5,int<<64>> ip_header_6,int<<64>> ip_header_7,int<<16>> udp_header_0,int<<16>> udp_header_1,int<<16>> udp_header_2,int<<16>> udp_header_3,int<<8>> sig_type,int<<16>> sig_idx,int<<8>> block_idx,int<<32>> next_signature);

memop set_start_time(int<<32>> stored_time,int<<32>> time_now)
 {if stored_time<0 then time_now else stored_time}

memop get_old(int<<32>> stored_count,int<<32>> ignore)
 {return stored_count;
}

memop increase_by(int<<32>> stored_count,int<<32>> amount)
 {return stored_count+amount;
}

handle set_next_signature(int<<48>> eth_header_0,int<<48>> eth_header_1,int<<16>> eth_header_2,int<<32>> ip_header_0,int<<16>> ip_header_1,int<<8>> ip_header_2,int<<8>> ip_header_3,int<<64>> ip_header_4,int<<64>> ip_header_5,int<<64>> ip_header_6,int<<64>> ip_header_7,int<<16>> udp_header_0,int<<16>> udp_header_1,int<<16>> udp_header_2,int<<16>> udp_header_3,int<<8>> sig_type,int<<16>> sig_idx,int<<8>> block_idx,int<<32>> next_signature) {

}

handle dummy_traffic(int<<48>> eth_header_0,int<<48>> eth_header_1,int<<16>> eth_header_2,int<<8>> ip_header_0,int<<8>> ip_header_1,int<<16>> ip_header_2,int<<16>> ip_header_3,int<<16>> ip_header_4,int<<8>> ip_header_5,int<<8>> ip_header_6,int<<16>> ip_header_7,int<<32>> ip_header_8,int<<32>> ip_header_9,int<<16>> udp_header_0,int<<16>> udp_header_1,int<<16>> udp_header_2,int<<16>> udp_header_3) {
Array.setm(application_packet_counter,0,increase_by,1);
generate_port (12, dummy_traffic(eth_header_0,eth_header_1,eth_header_2,ip_header_0,ip_header_1,ip_header_2,ip_header_3,ip_header_4,ip_header_5,ip_header_6,ip_header_7,ip_header_8,ip_header_9,udp_header_0,udp_header_1,udp_header_2,udp_header_3));
}

handle set_signature(int<<48>> eth_header_0,int<<48>> eth_header_1,int<<16>> eth_header_2,int<<32>> ip_header_0,int<<16>> ip_header_1,int<<8>> ip_header_2,int<<8>> ip_header_3,int<<64>> ip_header_4,int<<64>> ip_header_5,int<<64>> ip_header_6,int<<64>> ip_header_7,int<<16>> udp_header_0,int<<16>> udp_header_1,int<<16>> udp_header_2,int<<16>> udp_header_3,int<<8>> sig_type,int<<16>> sig_idx,int<<8>> block_idx,int<<32>> curr_signature,int<<32>> next_signature) {
Array.setm(start_time,0,set_start_time,Sys.time());
int<<16>> sig_idx_copy = hash<<16>>(1,sig_idx);
int<<32>> sig_copy = hash<<32>>(1,curr_signature);
int<<8>> block_idx_copy = hash<<8>>(1,block_idx);
if ((int<<32>>)sig_type==0) {
match block_idx_copy with 
| 0 -> {
Array.set(outgoing_book_signature_manager_0,sig_idx_copy,sig_copy);
}
| _ -> {
Array.set(outgoing_book_signature_manager_1,sig_idx_copy,sig_copy);
}
false;
} else {
match block_idx with 
| 0 -> {
Array.set(outgoing_metric_signature_manager_0,sig_idx,curr_signature);
}
| _ -> {
Array.set(outgoing_metric_signature_manager_1,sig_idx,curr_signature);
}
false;
}
if (next_signature!=0) {
generate_port (196, set_next_signature(eth_header_0,eth_header_1,eth_header_2,ip_header_0,ip_header_1-32,ip_header_2,ip_header_3,ip_header_4,ip_header_5,ip_header_6,ip_header_7,udp_header_0,udp_header_1,udp_header_2,udp_header_3,sig_type,sig_idx+1,block_idx,next_signature));
} else {
int<<32>> done_idx = Array.update(num_pkt_finishes,0,get_old,0,increase_by,1);
Array.set(pkt_finish_times,done_idx,Sys.time());
}
}