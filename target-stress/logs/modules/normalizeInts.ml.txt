---normalizeInts.ml log---
[balance_assign_exp] flat args: 
[balance_assign_exp]1024
[balance_assign_exp](int<<11>>)[14 : 5]seq_number
---[balance_assign_exp] flat args--- 
[balance_assign_exp] original expression:
1024+(int<<11>>)[14 : 5]seq_number
[balance_assign_exp] balanced expression:
(int<<11>>)[14 : 5]seq_number+1024
[balance_assign_exp] flat args: 
[balance_assign_exp]16
[balance_assign_exp](int<<5>>)[3 : 0]timestamp
---[balance_assign_exp] flat args--- 
[balance_assign_exp] original expression:
16+(int<<5>>)[3 : 0]timestamp
[balance_assign_exp] balanced expression:
(int<<5>>)[3 : 0]timestamp+16
[balance_assign_exp] flat args: 
[balance_assign_exp]18
[balance_assign_exp]forward_flow_ip_header_2
---[balance_assign_exp] flat args--- 
[balance_assign_exp] original expression:
18+forward_flow_ip_header_2
[balance_assign_exp] balanced expression:
forward_flow_ip_header_2+18
[balance_assign_exp] flat args: 
[balance_assign_exp]1024
[balance_assign_exp]word_addr
---[balance_assign_exp] flat args--- 
[balance_assign_exp] original expression:
1024+word_addr
[balance_assign_exp] balanced expression:
word_addr+1024
[balance_assign_exp] flat args: 
[balance_assign_exp]16
[balance_assign_exp]sig_addr
---[balance_assign_exp] flat args--- 
[balance_assign_exp] original expression:
16+sig_addr
[balance_assign_exp] balanced expression:
sig_addr+16
[balance_assign_exp] flat args: 
[balance_assign_exp]set_signature_sig_idx
[balance_assign_exp]1
---[balance_assign_exp] flat args--- 
[balance_assign_exp] original expression:
set_signature_sig_idx+1
[balance_assign_exp] balanced expression:
1+set_signature_sig_idx
[transform_precompute_exps.visit_exp] exp: 32
[transform_precompute_exps.visit_exp] atomic exp: 32
[transform_precompute_exps.visit_exp] exp: (int<<15>>)Array.update(sequence_counters_0,0,SequenceNumberManager_get_curr,0,SequenceNumberManager_next,1)
[transform_precompute_exps.visit_exp] atomic exp: (int<<15>>)to_immediate_tmp
[transform_precompute_exps.visit_exp] exp: SequenceNumberManager_increment_ret
[transform_precompute_exps.visit_exp] atomic exp: SequenceNumberManager_increment_ret
[transform_precompute_exps.visit_exp] exp: Sys.time()
[transform_precompute_exps.visit_exp] atomic exp: Sys.time()
[transform_precompute_exps.visit_exp] exp: [31 : 20]time_now
[transform_precompute_exps.visit_exp] atomic exp: [31 : 20]time_now
[transform_precompute_exps.visit_exp] exp: [2 : 2]timestamp
[transform_precompute_exps.visit_exp] atomic exp: [2 : 2]timestamp
[transform_precompute_exps.visit_exp] exp: 0
[transform_precompute_exps.visit_exp] atomic exp: 0
[transform_precompute_exps.visit_exp] exp: 0
[transform_precompute_exps.visit_exp] atomic exp: 0
[transform_precompute_exps.visit_exp] exp: (int<<11>>)[14 : 5]seq_number
[transform_precompute_exps.visit_exp] atomic exp: (int<<11>>)[14 : 5]seq_number
[transform_precompute_exps.visit_exp] exp: Array.get(outgoing_book_signature_manager_0,precompute)
[transform_precompute_exps.visit_exp] atomic exp: Array.get(outgoing_book_signature_manager_0,precompute)
[transform_precompute_exps.visit_exp] exp: (int<<11>>)[14 : 5]seq_number+1024
[transform_precompute_exps.visit_exp] atomic exp: to_immediate_tmp+1024
[transform_precompute_exps.visit_exp] exp: Array.get(outgoing_book_signature_manager_0,precompute)
[transform_precompute_exps.visit_exp] atomic exp: Array.get(outgoing_book_signature_manager_0,precompute)
[transform_precompute_exps.visit_exp] exp: [4 : 0]seq_number
[transform_precompute_exps.visit_exp] atomic exp: [4 : 0]seq_number
[transform_precompute_exps.visit_exp] exp: [0 : 0]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [0 : 0]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [1 : 1]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [1 : 1]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [2 : 2]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [2 : 2]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [3 : 3]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [3 : 3]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [4 : 4]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [4 : 4]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [5 : 5]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [5 : 5]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [6 : 6]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [6 : 6]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [7 : 7]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [7 : 7]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [8 : 8]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [8 : 8]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [9 : 9]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [9 : 9]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [10 : 10]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [10 : 10]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [11 : 11]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [11 : 11]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [12 : 12]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [12 : 12]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [13 : 13]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [13 : 13]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [14 : 14]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [14 : 14]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [15 : 15]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [15 : 15]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [16 : 16]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [16 : 16]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [17 : 17]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [17 : 17]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [18 : 18]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [18 : 18]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [19 : 19]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [19 : 19]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [20 : 20]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [20 : 20]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [21 : 21]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [21 : 21]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [22 : 22]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [22 : 22]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [23 : 23]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [23 : 23]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [24 : 24]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [24 : 24]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [25 : 25]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [25 : 25]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [26 : 26]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [26 : 26]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [27 : 27]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [27 : 27]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [28 : 28]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [28 : 28]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [29 : 29]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [29 : 29]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [30 : 30]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [30 : 30]sig_bitstring
[transform_precompute_exps.visit_exp] exp: [31 : 31]sig_bitstring
[transform_precompute_exps.visit_exp] atomic exp: [31 : 31]sig_bitstring
[transform_precompute_exps.visit_exp] exp: BookSignatureManager_sign_ret
[transform_precompute_exps.visit_exp] atomic exp: BookSignatureManager_sign_ret
[transform_precompute_exps.visit_exp] exp: [4 : 4]timestamp
[transform_precompute_exps.visit_exp] atomic exp: [4 : 4]timestamp
[transform_precompute_exps.visit_exp] exp: 32
[transform_precompute_exps.visit_exp] atomic exp: 32
[transform_precompute_exps.visit_exp] exp: (int<<5>>)[3 : 0]timestamp
[transform_precompute_exps.visit_exp] atomic exp: (int<<5>>)[3 : 0]timestamp
[transform_precompute_exps.visit_exp] exp: Array.get(outgoing_metric_signature_manager_0,precompute)
[transform_precompute_exps.visit_exp] atomic exp: Array.get(outgoing_metric_signature_manager_0,precompute)
[transform_precompute_exps.visit_exp] exp: (int<<5>>)[3 : 0]timestamp+16
[transform_precompute_exps.visit_exp] atomic exp: to_immediate_tmp+16
[transform_precompute_exps.visit_exp] exp: Array.get(outgoing_metric_signature_manager_0,precompute)
[transform_precompute_exps.visit_exp] atomic exp: Array.get(outgoing_metric_signature_manager_0,precompute)
[transform_precompute_exps.visit_exp] exp: MetricSignatureManager_sign_ret
[transform_precompute_exps.visit_exp] atomic exp: MetricSignatureManager_sign_ret
[transform_precompute_exps.visit_exp] exp: 0
[transform_precompute_exps.visit_exp] atomic exp: 0
[transform_precompute_exps.visit_exp] exp: hash<<16>>(1,timestamp)
[transform_precompute_exps.visit_exp] atomic exp: hash<<16>>(1,timestamp)
[transform_precompute_exps.visit_exp] exp: ts_signature
[transform_precompute_exps.visit_exp] atomic exp: ts_signature
[transform_precompute_exps.visit_exp] exp: (int<<16>>)seq_number
[transform_precompute_exps.visit_exp] atomic exp: (int<<16>>)seq_number
[transform_precompute_exps.visit_exp] exp: (int<<8>>)book_signature
[transform_precompute_exps.visit_exp] atomic exp: (int<<8>>)book_signature
[transform_precompute_exps.visit_exp] exp: forward_flow_ip_header_2+18
[transform_precompute_exps.visit_exp] atomic exp: forward_flow_ip_header_2+18
[transform_precompute_exps.visit_exp] exp: (int<<32>>)set_signature_sig_type-0
[transform_precompute_exps.visit_exp] atomic exp: (int<<32>>)set_signature_sig_type-0
[transform_precompute_exps.visit_exp] exp: [10 : 0]set_signature_sig_idx
[transform_precompute_exps.visit_exp] atomic exp: [10 : 0]set_signature_sig_idx
[transform_precompute_exps.visit_exp] exp: [0 : 0]set_signature_block_idx
[transform_precompute_exps.visit_exp] atomic exp: [0 : 0]set_signature_block_idx
[transform_precompute_exps.visit_exp] exp: (int<<32>>)block_idx
[transform_precompute_exps.visit_exp] atomic exp: (int<<32>>)block_idx
[transform_precompute_exps.visit_exp] exp: word_addr+1024
[transform_precompute_exps.visit_exp] atomic exp: word_addr+1024
[transform_precompute_exps.visit_exp] exp: [4 : 0]set_signature_sig_idx
[transform_precompute_exps.visit_exp] atomic exp: [4 : 0]set_signature_sig_idx
[transform_precompute_exps.visit_exp] exp: [0 : 0]set_signature_block_idx
[transform_precompute_exps.visit_exp] atomic exp: [0 : 0]set_signature_block_idx
[transform_precompute_exps.visit_exp] exp: sig_addr+16
[transform_precompute_exps.visit_exp] atomic exp: sig_addr+16
[transform_precompute_exps.visit_exp] exp: 1+set_signature_sig_idx
[transform_precompute_exps.visit_exp] atomic exp: 1+set_signature_sig_idx
original program: 
memop SequenceNumberManager_next(int<<32>> curr,int<<32>> inc)
 {return curr+inc;
}

memop SequenceNumberManager_get_curr(int<<32>> curr,int<<32>> inc)
 {return curr;
}

global Array.t<<16>> sequence_counters_0 = Array.create(1);


global Array.t<<32>> outgoing_book_signature_manager_0 = Array.create(2048);


global Array.t<<32>> outgoing_metric_signature_manager_0 = Array.create(32);


entry event forward_flow(int<<48>> forward_flow_eth_header_0,int<<48>> forward_flow_eth_header_1,int<<16>> forward_flow_eth_header_2,int<<8>> forward_flow_ip_header_0,int<<8>> forward_flow_ip_header_1,int<<16>> forward_flow_ip_header_2,int<<16>> forward_flow_ip_header_3,int<<16>> forward_flow_ip_header_4,int<<8>> forward_flow_ip_header_5,int<<8>> forward_flow_ip_header_6,int<<16>> forward_flow_ip_header_7,int<<32>> forward_flow_ip_header_8,int<<32>> forward_flow_ip_header_9,int<<16>> forward_flow_udp_header_0,int<<16>> forward_flow_udp_header_1,int<<16>> forward_flow_udp_header_2,int<<16>> forward_flow_udp_header_3);

event incoming_tango_traffic(int<<48>> incoming_tango_traffic_tango_eth_header_0,int<<48>> incoming_tango_traffic_tango_eth_header_1,int<<16>> incoming_tango_traffic_tango_eth_header_2,int<<32>> incoming_tango_traffic_tango_ip_header_0,int<<16>> incoming_tango_traffic_tango_ip_header_1,int<<8>> incoming_tango_traffic_tango_ip_header_2,int<<8>> incoming_tango_traffic_tango_ip_header_3,int<<64>> incoming_tango_traffic_tango_ip_header_4,int<<64>> incoming_tango_traffic_tango_ip_header_5,int<<64>> incoming_tango_traffic_tango_ip_header_6,int<<64>> incoming_tango_traffic_tango_ip_header_7,int<<16>> incoming_tango_traffic_tango_udp_header_0,int<<16>> incoming_tango_traffic_tango_udp_header_1,int<<16>> incoming_tango_traffic_tango_udp_header_2,int<<16>> incoming_tango_traffic_tango_udp_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_0,int<<16>> incoming_tango_traffic_tango_metrics_header_1,int<<32>> incoming_tango_traffic_tango_metrics_header_2,int<<16>> incoming_tango_traffic_tango_metrics_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_0,int<<8>> incoming_tango_traffic_encaped_ip_header_1,int<<16>> incoming_tango_traffic_encaped_ip_header_2,int<<16>> incoming_tango_traffic_encaped_ip_header_3,int<<16>> incoming_tango_traffic_encaped_ip_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_5,int<<8>> incoming_tango_traffic_encaped_ip_header_6,int<<16>> incoming_tango_traffic_encaped_ip_header_7,int<<32>> incoming_tango_traffic_encaped_ip_header_8,int<<32>> incoming_tango_traffic_encaped_ip_header_9,int<<16>> incoming_tango_traffic_encaped_udp_header_0,int<<16>> incoming_tango_traffic_encaped_udp_header_1,int<<16>> incoming_tango_traffic_encaped_udp_header_2,int<<16>> incoming_tango_traffic_encaped_udp_header_3);

handle incoming_tango_traffic(int<<48>> incoming_tango_traffic_tango_eth_header_0,int<<48>> incoming_tango_traffic_tango_eth_header_1,int<<16>> incoming_tango_traffic_tango_eth_header_2,int<<32>> incoming_tango_traffic_tango_ip_header_0,int<<16>> incoming_tango_traffic_tango_ip_header_1,int<<8>> incoming_tango_traffic_tango_ip_header_2,int<<8>> incoming_tango_traffic_tango_ip_header_3,int<<64>> incoming_tango_traffic_tango_ip_header_4,int<<64>> incoming_tango_traffic_tango_ip_header_5,int<<64>> incoming_tango_traffic_tango_ip_header_6,int<<64>> incoming_tango_traffic_tango_ip_header_7,int<<16>> incoming_tango_traffic_tango_udp_header_0,int<<16>> incoming_tango_traffic_tango_udp_header_1,int<<16>> incoming_tango_traffic_tango_udp_header_2,int<<16>> incoming_tango_traffic_tango_udp_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_0,int<<16>> incoming_tango_traffic_tango_metrics_header_1,int<<32>> incoming_tango_traffic_tango_metrics_header_2,int<<16>> incoming_tango_traffic_tango_metrics_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_0,int<<8>> incoming_tango_traffic_encaped_ip_header_1,int<<16>> incoming_tango_traffic_encaped_ip_header_2,int<<16>> incoming_tango_traffic_encaped_ip_header_3,int<<16>> incoming_tango_traffic_encaped_ip_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_5,int<<8>> incoming_tango_traffic_encaped_ip_header_6,int<<16>> incoming_tango_traffic_encaped_ip_header_7,int<<32>> incoming_tango_traffic_encaped_ip_header_8,int<<32>> incoming_tango_traffic_encaped_ip_header_9,int<<16>> incoming_tango_traffic_encaped_udp_header_0,int<<16>> incoming_tango_traffic_encaped_udp_header_1,int<<16>> incoming_tango_traffic_encaped_udp_header_2,int<<16>> incoming_tango_traffic_encaped_udp_header_3) {

}

event set_signature(int<<8>> set_signature_sig_type,int<<16>> set_signature_sig_idx,int<<8>> set_signature_block_idx,int<<32>> set_signature_curr_signature,int<<32>> set_signature_next_signature);

event set_next_signature(int<<8>> set_next_signature_sig_type,int<<16>> set_next_signature_sig_idx,int<<8>> set_next_signature_block_idx,int<<32>> set_next_signature_next_signature);

handle set_next_signature(int<<8>> set_next_signature_sig_type,int<<16>> set_next_signature_sig_idx,int<<8>> set_next_signature_block_idx,int<<32>> set_next_signature_next_signature) {

}

handle forward_flow(int<<48>> forward_flow_eth_header_0,int<<48>> forward_flow_eth_header_1,int<<16>> forward_flow_eth_header_2,int<<8>> forward_flow_ip_header_0,int<<8>> forward_flow_ip_header_1,int<<16>> forward_flow_ip_header_2,int<<16>> forward_flow_ip_header_3,int<<16>> forward_flow_ip_header_4,int<<8>> forward_flow_ip_header_5,int<<8>> forward_flow_ip_header_6,int<<16>> forward_flow_ip_header_7,int<<32>> forward_flow_ip_header_8,int<<32>> forward_flow_ip_header_9,int<<16>> forward_flow_udp_header_0,int<<16>> forward_flow_udp_header_1,int<<16>> forward_flow_udp_header_2,int<<16>> forward_flow_udp_header_3) {
int<<15>> SequenceNumberManager_increment_ret = 32;
SequenceNumberManager_increment_ret = (int<<15>>)Array.update(sequence_counters_0,0,SequenceNumberManager_get_curr,0,SequenceNumberManager_next,1);
int<<15>> seq_number = SequenceNumberManager_increment_ret;
int<<32>> time_now = Sys.time();
int<<12>> timestamp = [31 : 20]time_now;
int<<1>> block_idx = [2 : 2]timestamp;
int<<1>> BookSignatureManager_sign_ret = 0;
int<<32>> sig_bitstring = 0;
match block_idx with 
| 0 -> {
int<<11>> precompute = (int<<11>>)[14 : 5]seq_number;
sig_bitstring = Array.get(outgoing_book_signature_manager_0,precompute);
}
| _ -> {
int<<11>> precompute = 1024+(int<<11>>)[14 : 5]seq_number;
sig_bitstring = Array.get(outgoing_book_signature_manager_0,precompute);
}
int<<5>> bitwhack_index = [4 : 0]seq_number;
match bitwhack_index with 
| 0 -> {
BookSignatureManager_sign_ret = [0 : 0]sig_bitstring;
}
| 1 -> {
BookSignatureManager_sign_ret = [1 : 1]sig_bitstring;
}
| 2 -> {
BookSignatureManager_sign_ret = [2 : 2]sig_bitstring;
}
| 3 -> {
BookSignatureManager_sign_ret = [3 : 3]sig_bitstring;
}
| 4 -> {
BookSignatureManager_sign_ret = [4 : 4]sig_bitstring;
}
| 5 -> {
BookSignatureManager_sign_ret = [5 : 5]sig_bitstring;
}
| 6 -> {
BookSignatureManager_sign_ret = [6 : 6]sig_bitstring;
}
| 7 -> {
BookSignatureManager_sign_ret = [7 : 7]sig_bitstring;
}
| 8 -> {
BookSignatureManager_sign_ret = [8 : 8]sig_bitstring;
}
| 9 -> {
BookSignatureManager_sign_ret = [9 : 9]sig_bitstring;
}
| 10 -> {
BookSignatureManager_sign_ret = [10 : 10]sig_bitstring;
}
| 11 -> {
BookSignatureManager_sign_ret = [11 : 11]sig_bitstring;
}
| 12 -> {
BookSignatureManager_sign_ret = [12 : 12]sig_bitstring;
}
| 13 -> {
BookSignatureManager_sign_ret = [13 : 13]sig_bitstring;
}
| 14 -> {
BookSignatureManager_sign_ret = [14 : 14]sig_bitstring;
}
| 15 -> {
BookSignatureManager_sign_ret = [15 : 15]sig_bitstring;
}
| 16 -> {
BookSignatureManager_sign_ret = [16 : 16]sig_bitstring;
}
| 17 -> {
BookSignatureManager_sign_ret = [17 : 17]sig_bitstring;
}
| 18 -> {
BookSignatureManager_sign_ret = [18 : 18]sig_bitstring;
}
| 19 -> {
BookSignatureManager_sign_ret = [19 : 19]sig_bitstring;
}
| 20 -> {
BookSignatureManager_sign_ret = [20 : 20]sig_bitstring;
}
| 21 -> {
BookSignatureManager_sign_ret = [21 : 21]sig_bitstring;
}
| 22 -> {
BookSignatureManager_sign_ret = [22 : 22]sig_bitstring;
}
| 23 -> {
BookSignatureManager_sign_ret = [23 : 23]sig_bitstring;
}
| 24 -> {
BookSignatureManager_sign_ret = [24 : 24]sig_bitstring;
}
| 25 -> {
BookSignatureManager_sign_ret = [25 : 25]sig_bitstring;
}
| 26 -> {
BookSignatureManager_sign_ret = [26 : 26]sig_bitstring;
}
| 27 -> {
BookSignatureManager_sign_ret = [27 : 27]sig_bitstring;
}
| 28 -> {
BookSignatureManager_sign_ret = [28 : 28]sig_bitstring;
}
| 29 -> {
BookSignatureManager_sign_ret = [29 : 29]sig_bitstring;
}
| 30 -> {
BookSignatureManager_sign_ret = [30 : 30]sig_bitstring;
}
| _ -> {
BookSignatureManager_sign_ret = [31 : 31]sig_bitstring;
}
int<<1>> book_signature = BookSignatureManager_sign_ret;
int<<1>> block_idx = [4 : 4]timestamp;
int<<32>> MetricSignatureManager_sign_ret = 32;
match block_idx with 
| 0 -> {
int<<5>> precompute = (int<<5>>)[3 : 0]timestamp;
MetricSignatureManager_sign_ret = Array.get(outgoing_metric_signature_manager_0,precompute);
}
| _ -> {
int<<5>> precompute = 16+(int<<5>>)[3 : 0]timestamp;
MetricSignatureManager_sign_ret = Array.get(outgoing_metric_signature_manager_0,precompute);
}
int<<32>> ts_signature = MetricSignatureManager_sign_ret;
int<<8>> tango_metrics_hdr_0 = 0;
int<<16>> tango_metrics_hdr_1 = hash<<16>>(1,timestamp);
int<<32>> tango_metrics_hdr_2 = ts_signature;
int<<16>> tango_metrics_hdr_3 = (int<<16>>)seq_number;
int<<8>> tango_metrics_hdr_4 = (int<<8>>)book_signature;
int<<16>> precompute = 18+forward_flow_ip_header_2;
generate_port (128, incoming_tango_traffic(forward_flow_eth_header_0,forward_flow_eth_header_1,34525,0,precompute,0,0,0,0,0,0,8080,8080,0,0,tango_metrics_hdr_0,tango_metrics_hdr_1,tango_metrics_hdr_2,tango_metrics_hdr_3,tango_metrics_hdr_4,forward_flow_ip_header_0,forward_flow_ip_header_1,forward_flow_ip_header_2,forward_flow_ip_header_3,forward_flow_ip_header_4,forward_flow_ip_header_5,forward_flow_ip_header_6,forward_flow_ip_header_7,forward_flow_ip_header_8,forward_flow_ip_header_9,forward_flow_udp_header_0,forward_flow_udp_header_1,forward_flow_udp_header_2,forward_flow_udp_header_3));
}

handle set_signature(int<<8>> set_signature_sig_type,int<<16>> set_signature_sig_idx,int<<8>> set_signature_block_idx,int<<32>> set_signature_curr_signature,int<<32>> set_signature_next_signature) {
int<<32>> if_precomp = (int<<32>>)set_signature_sig_type-0;
if (if_precomp==0) {
int<<11>> word_addr = [10 : 0]set_signature_sig_idx;
int<<1>> block_idx = [0 : 0]set_signature_block_idx;
int<<32>> block = (int<<32>>)block_idx;
match block with 
| 0 -> {
Array.set(outgoing_book_signature_manager_0,word_addr,set_signature_curr_signature);
}
| _ -> {
int<<11>> precompute = 1024+word_addr;
Array.set(outgoing_book_signature_manager_0,precompute,set_signature_curr_signature);
}
} else {
int<<5>> sig_addr = [4 : 0]set_signature_sig_idx;
int<<1>> block_idx = [0 : 0]set_signature_block_idx;
match block_idx with 
| 0 -> {
Array.set(outgoing_metric_signature_manager_0,sig_addr,set_signature_curr_signature);
}
| _ -> {
int<<5>> precompute = 16+sig_addr;
Array.set(outgoing_metric_signature_manager_0,precompute,set_signature_curr_signature);
}
}
if (set_signature_next_signature!=0) {
int<<16>> precompute = set_signature_sig_idx+1;
generate_port (196, set_next_signature(set_signature_sig_type,precompute,set_signature_block_idx,set_signature_next_signature));
} 
}
program after exp tree balancing: 
memop SequenceNumberManager_next(int<<32>> curr,int<<32>> inc)
 {return curr+inc;
}

memop SequenceNumberManager_get_curr(int<<32>> curr,int<<32>> inc)
 {return curr;
}

global Array.t<<16>> sequence_counters_0 = Array.create(1);


global Array.t<<32>> outgoing_book_signature_manager_0 = Array.create(2048);


global Array.t<<32>> outgoing_metric_signature_manager_0 = Array.create(32);


entry event forward_flow(int<<48>> forward_flow_eth_header_0,int<<48>> forward_flow_eth_header_1,int<<16>> forward_flow_eth_header_2,int<<8>> forward_flow_ip_header_0,int<<8>> forward_flow_ip_header_1,int<<16>> forward_flow_ip_header_2,int<<16>> forward_flow_ip_header_3,int<<16>> forward_flow_ip_header_4,int<<8>> forward_flow_ip_header_5,int<<8>> forward_flow_ip_header_6,int<<16>> forward_flow_ip_header_7,int<<32>> forward_flow_ip_header_8,int<<32>> forward_flow_ip_header_9,int<<16>> forward_flow_udp_header_0,int<<16>> forward_flow_udp_header_1,int<<16>> forward_flow_udp_header_2,int<<16>> forward_flow_udp_header_3);

event incoming_tango_traffic(int<<48>> incoming_tango_traffic_tango_eth_header_0,int<<48>> incoming_tango_traffic_tango_eth_header_1,int<<16>> incoming_tango_traffic_tango_eth_header_2,int<<32>> incoming_tango_traffic_tango_ip_header_0,int<<16>> incoming_tango_traffic_tango_ip_header_1,int<<8>> incoming_tango_traffic_tango_ip_header_2,int<<8>> incoming_tango_traffic_tango_ip_header_3,int<<64>> incoming_tango_traffic_tango_ip_header_4,int<<64>> incoming_tango_traffic_tango_ip_header_5,int<<64>> incoming_tango_traffic_tango_ip_header_6,int<<64>> incoming_tango_traffic_tango_ip_header_7,int<<16>> incoming_tango_traffic_tango_udp_header_0,int<<16>> incoming_tango_traffic_tango_udp_header_1,int<<16>> incoming_tango_traffic_tango_udp_header_2,int<<16>> incoming_tango_traffic_tango_udp_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_0,int<<16>> incoming_tango_traffic_tango_metrics_header_1,int<<32>> incoming_tango_traffic_tango_metrics_header_2,int<<16>> incoming_tango_traffic_tango_metrics_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_0,int<<8>> incoming_tango_traffic_encaped_ip_header_1,int<<16>> incoming_tango_traffic_encaped_ip_header_2,int<<16>> incoming_tango_traffic_encaped_ip_header_3,int<<16>> incoming_tango_traffic_encaped_ip_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_5,int<<8>> incoming_tango_traffic_encaped_ip_header_6,int<<16>> incoming_tango_traffic_encaped_ip_header_7,int<<32>> incoming_tango_traffic_encaped_ip_header_8,int<<32>> incoming_tango_traffic_encaped_ip_header_9,int<<16>> incoming_tango_traffic_encaped_udp_header_0,int<<16>> incoming_tango_traffic_encaped_udp_header_1,int<<16>> incoming_tango_traffic_encaped_udp_header_2,int<<16>> incoming_tango_traffic_encaped_udp_header_3);

handle incoming_tango_traffic(int<<48>> incoming_tango_traffic_tango_eth_header_0,int<<48>> incoming_tango_traffic_tango_eth_header_1,int<<16>> incoming_tango_traffic_tango_eth_header_2,int<<32>> incoming_tango_traffic_tango_ip_header_0,int<<16>> incoming_tango_traffic_tango_ip_header_1,int<<8>> incoming_tango_traffic_tango_ip_header_2,int<<8>> incoming_tango_traffic_tango_ip_header_3,int<<64>> incoming_tango_traffic_tango_ip_header_4,int<<64>> incoming_tango_traffic_tango_ip_header_5,int<<64>> incoming_tango_traffic_tango_ip_header_6,int<<64>> incoming_tango_traffic_tango_ip_header_7,int<<16>> incoming_tango_traffic_tango_udp_header_0,int<<16>> incoming_tango_traffic_tango_udp_header_1,int<<16>> incoming_tango_traffic_tango_udp_header_2,int<<16>> incoming_tango_traffic_tango_udp_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_0,int<<16>> incoming_tango_traffic_tango_metrics_header_1,int<<32>> incoming_tango_traffic_tango_metrics_header_2,int<<16>> incoming_tango_traffic_tango_metrics_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_0,int<<8>> incoming_tango_traffic_encaped_ip_header_1,int<<16>> incoming_tango_traffic_encaped_ip_header_2,int<<16>> incoming_tango_traffic_encaped_ip_header_3,int<<16>> incoming_tango_traffic_encaped_ip_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_5,int<<8>> incoming_tango_traffic_encaped_ip_header_6,int<<16>> incoming_tango_traffic_encaped_ip_header_7,int<<32>> incoming_tango_traffic_encaped_ip_header_8,int<<32>> incoming_tango_traffic_encaped_ip_header_9,int<<16>> incoming_tango_traffic_encaped_udp_header_0,int<<16>> incoming_tango_traffic_encaped_udp_header_1,int<<16>> incoming_tango_traffic_encaped_udp_header_2,int<<16>> incoming_tango_traffic_encaped_udp_header_3) {

}

event set_signature(int<<8>> set_signature_sig_type,int<<16>> set_signature_sig_idx,int<<8>> set_signature_block_idx,int<<32>> set_signature_curr_signature,int<<32>> set_signature_next_signature);

event set_next_signature(int<<8>> set_next_signature_sig_type,int<<16>> set_next_signature_sig_idx,int<<8>> set_next_signature_block_idx,int<<32>> set_next_signature_next_signature);

handle set_next_signature(int<<8>> set_next_signature_sig_type,int<<16>> set_next_signature_sig_idx,int<<8>> set_next_signature_block_idx,int<<32>> set_next_signature_next_signature) {

}

handle forward_flow(int<<48>> forward_flow_eth_header_0,int<<48>> forward_flow_eth_header_1,int<<16>> forward_flow_eth_header_2,int<<8>> forward_flow_ip_header_0,int<<8>> forward_flow_ip_header_1,int<<16>> forward_flow_ip_header_2,int<<16>> forward_flow_ip_header_3,int<<16>> forward_flow_ip_header_4,int<<8>> forward_flow_ip_header_5,int<<8>> forward_flow_ip_header_6,int<<16>> forward_flow_ip_header_7,int<<32>> forward_flow_ip_header_8,int<<32>> forward_flow_ip_header_9,int<<16>> forward_flow_udp_header_0,int<<16>> forward_flow_udp_header_1,int<<16>> forward_flow_udp_header_2,int<<16>> forward_flow_udp_header_3) {
int<<15>> SequenceNumberManager_increment_ret = 32;
SequenceNumberManager_increment_ret = (int<<15>>)Array.update(sequence_counters_0,0,SequenceNumberManager_get_curr,0,SequenceNumberManager_next,1);
int<<15>> seq_number = SequenceNumberManager_increment_ret;
int<<32>> time_now = Sys.time();
int<<12>> timestamp = [31 : 20]time_now;
int<<1>> block_idx = [2 : 2]timestamp;
int<<1>> BookSignatureManager_sign_ret = 0;
int<<32>> sig_bitstring = 0;
match block_idx with 
| 0 -> {
int<<11>> precompute = (int<<11>>)[14 : 5]seq_number;
sig_bitstring = Array.get(outgoing_book_signature_manager_0,precompute);
}
| _ -> {
int<<11>> precompute = (int<<11>>)[14 : 5]seq_number+1024;
sig_bitstring = Array.get(outgoing_book_signature_manager_0,precompute);
}
int<<5>> bitwhack_index = [4 : 0]seq_number;
match bitwhack_index with 
| 0 -> {
BookSignatureManager_sign_ret = [0 : 0]sig_bitstring;
}
| 1 -> {
BookSignatureManager_sign_ret = [1 : 1]sig_bitstring;
}
| 2 -> {
BookSignatureManager_sign_ret = [2 : 2]sig_bitstring;
}
| 3 -> {
BookSignatureManager_sign_ret = [3 : 3]sig_bitstring;
}
| 4 -> {
BookSignatureManager_sign_ret = [4 : 4]sig_bitstring;
}
| 5 -> {
BookSignatureManager_sign_ret = [5 : 5]sig_bitstring;
}
| 6 -> {
BookSignatureManager_sign_ret = [6 : 6]sig_bitstring;
}
| 7 -> {
BookSignatureManager_sign_ret = [7 : 7]sig_bitstring;
}
| 8 -> {
BookSignatureManager_sign_ret = [8 : 8]sig_bitstring;
}
| 9 -> {
BookSignatureManager_sign_ret = [9 : 9]sig_bitstring;
}
| 10 -> {
BookSignatureManager_sign_ret = [10 : 10]sig_bitstring;
}
| 11 -> {
BookSignatureManager_sign_ret = [11 : 11]sig_bitstring;
}
| 12 -> {
BookSignatureManager_sign_ret = [12 : 12]sig_bitstring;
}
| 13 -> {
BookSignatureManager_sign_ret = [13 : 13]sig_bitstring;
}
| 14 -> {
BookSignatureManager_sign_ret = [14 : 14]sig_bitstring;
}
| 15 -> {
BookSignatureManager_sign_ret = [15 : 15]sig_bitstring;
}
| 16 -> {
BookSignatureManager_sign_ret = [16 : 16]sig_bitstring;
}
| 17 -> {
BookSignatureManager_sign_ret = [17 : 17]sig_bitstring;
}
| 18 -> {
BookSignatureManager_sign_ret = [18 : 18]sig_bitstring;
}
| 19 -> {
BookSignatureManager_sign_ret = [19 : 19]sig_bitstring;
}
| 20 -> {
BookSignatureManager_sign_ret = [20 : 20]sig_bitstring;
}
| 21 -> {
BookSignatureManager_sign_ret = [21 : 21]sig_bitstring;
}
| 22 -> {
BookSignatureManager_sign_ret = [22 : 22]sig_bitstring;
}
| 23 -> {
BookSignatureManager_sign_ret = [23 : 23]sig_bitstring;
}
| 24 -> {
BookSignatureManager_sign_ret = [24 : 24]sig_bitstring;
}
| 25 -> {
BookSignatureManager_sign_ret = [25 : 25]sig_bitstring;
}
| 26 -> {
BookSignatureManager_sign_ret = [26 : 26]sig_bitstring;
}
| 27 -> {
BookSignatureManager_sign_ret = [27 : 27]sig_bitstring;
}
| 28 -> {
BookSignatureManager_sign_ret = [28 : 28]sig_bitstring;
}
| 29 -> {
BookSignatureManager_sign_ret = [29 : 29]sig_bitstring;
}
| 30 -> {
BookSignatureManager_sign_ret = [30 : 30]sig_bitstring;
}
| _ -> {
BookSignatureManager_sign_ret = [31 : 31]sig_bitstring;
}
int<<1>> book_signature = BookSignatureManager_sign_ret;
int<<1>> block_idx = [4 : 4]timestamp;
int<<32>> MetricSignatureManager_sign_ret = 32;
match block_idx with 
| 0 -> {
int<<5>> precompute = (int<<5>>)[3 : 0]timestamp;
MetricSignatureManager_sign_ret = Array.get(outgoing_metric_signature_manager_0,precompute);
}
| _ -> {
int<<5>> precompute = (int<<5>>)[3 : 0]timestamp+16;
MetricSignatureManager_sign_ret = Array.get(outgoing_metric_signature_manager_0,precompute);
}
int<<32>> ts_signature = MetricSignatureManager_sign_ret;
int<<8>> tango_metrics_hdr_0 = 0;
int<<16>> tango_metrics_hdr_1 = hash<<16>>(1,timestamp);
int<<32>> tango_metrics_hdr_2 = ts_signature;
int<<16>> tango_metrics_hdr_3 = (int<<16>>)seq_number;
int<<8>> tango_metrics_hdr_4 = (int<<8>>)book_signature;
int<<16>> precompute = forward_flow_ip_header_2+18;
generate_port (128, incoming_tango_traffic(forward_flow_eth_header_0,forward_flow_eth_header_1,34525,0,precompute,0,0,0,0,0,0,8080,8080,0,0,tango_metrics_hdr_0,tango_metrics_hdr_1,tango_metrics_hdr_2,tango_metrics_hdr_3,tango_metrics_hdr_4,forward_flow_ip_header_0,forward_flow_ip_header_1,forward_flow_ip_header_2,forward_flow_ip_header_3,forward_flow_ip_header_4,forward_flow_ip_header_5,forward_flow_ip_header_6,forward_flow_ip_header_7,forward_flow_ip_header_8,forward_flow_ip_header_9,forward_flow_udp_header_0,forward_flow_udp_header_1,forward_flow_udp_header_2,forward_flow_udp_header_3));
}

handle set_signature(int<<8>> set_signature_sig_type,int<<16>> set_signature_sig_idx,int<<8>> set_signature_block_idx,int<<32>> set_signature_curr_signature,int<<32>> set_signature_next_signature) {
int<<32>> if_precomp = (int<<32>>)set_signature_sig_type-0;
if (if_precomp==0) {
int<<11>> word_addr = [10 : 0]set_signature_sig_idx;
int<<1>> block_idx = [0 : 0]set_signature_block_idx;
int<<32>> block = (int<<32>>)block_idx;
match block with 
| 0 -> {
Array.set(outgoing_book_signature_manager_0,word_addr,set_signature_curr_signature);
}
| _ -> {
int<<11>> precompute = word_addr+1024;
Array.set(outgoing_book_signature_manager_0,precompute,set_signature_curr_signature);
}
} else {
int<<5>> sig_addr = [4 : 0]set_signature_sig_idx;
int<<1>> block_idx = [0 : 0]set_signature_block_idx;
match block_idx with 
| 0 -> {
Array.set(outgoing_metric_signature_manager_0,sig_addr,set_signature_curr_signature);
}
| _ -> {
int<<5>> precompute = sig_addr+16;
Array.set(outgoing_metric_signature_manager_0,precompute,set_signature_curr_signature);
}
}
if (set_signature_next_signature!=0) {
int<<16>> precompute = 1+set_signature_sig_idx;
generate_port (196, set_next_signature(set_signature_sig_type,precompute,set_signature_block_idx,set_signature_next_signature));
} 
}
program after precomputation pass: 
memop SequenceNumberManager_next(int<<32>> curr,int<<32>> inc)
 {return curr+inc;
}

memop SequenceNumberManager_get_curr(int<<32>> curr,int<<32>> inc)
 {return curr;
}

global Array.t<<16>> sequence_counters_0 = Array.create(1);


global Array.t<<32>> outgoing_book_signature_manager_0 = Array.create(2048);


global Array.t<<32>> outgoing_metric_signature_manager_0 = Array.create(32);


entry event forward_flow(int<<48>> forward_flow_eth_header_0,int<<48>> forward_flow_eth_header_1,int<<16>> forward_flow_eth_header_2,int<<8>> forward_flow_ip_header_0,int<<8>> forward_flow_ip_header_1,int<<16>> forward_flow_ip_header_2,int<<16>> forward_flow_ip_header_3,int<<16>> forward_flow_ip_header_4,int<<8>> forward_flow_ip_header_5,int<<8>> forward_flow_ip_header_6,int<<16>> forward_flow_ip_header_7,int<<32>> forward_flow_ip_header_8,int<<32>> forward_flow_ip_header_9,int<<16>> forward_flow_udp_header_0,int<<16>> forward_flow_udp_header_1,int<<16>> forward_flow_udp_header_2,int<<16>> forward_flow_udp_header_3);

event incoming_tango_traffic(int<<48>> incoming_tango_traffic_tango_eth_header_0,int<<48>> incoming_tango_traffic_tango_eth_header_1,int<<16>> incoming_tango_traffic_tango_eth_header_2,int<<32>> incoming_tango_traffic_tango_ip_header_0,int<<16>> incoming_tango_traffic_tango_ip_header_1,int<<8>> incoming_tango_traffic_tango_ip_header_2,int<<8>> incoming_tango_traffic_tango_ip_header_3,int<<64>> incoming_tango_traffic_tango_ip_header_4,int<<64>> incoming_tango_traffic_tango_ip_header_5,int<<64>> incoming_tango_traffic_tango_ip_header_6,int<<64>> incoming_tango_traffic_tango_ip_header_7,int<<16>> incoming_tango_traffic_tango_udp_header_0,int<<16>> incoming_tango_traffic_tango_udp_header_1,int<<16>> incoming_tango_traffic_tango_udp_header_2,int<<16>> incoming_tango_traffic_tango_udp_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_0,int<<16>> incoming_tango_traffic_tango_metrics_header_1,int<<32>> incoming_tango_traffic_tango_metrics_header_2,int<<16>> incoming_tango_traffic_tango_metrics_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_0,int<<8>> incoming_tango_traffic_encaped_ip_header_1,int<<16>> incoming_tango_traffic_encaped_ip_header_2,int<<16>> incoming_tango_traffic_encaped_ip_header_3,int<<16>> incoming_tango_traffic_encaped_ip_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_5,int<<8>> incoming_tango_traffic_encaped_ip_header_6,int<<16>> incoming_tango_traffic_encaped_ip_header_7,int<<32>> incoming_tango_traffic_encaped_ip_header_8,int<<32>> incoming_tango_traffic_encaped_ip_header_9,int<<16>> incoming_tango_traffic_encaped_udp_header_0,int<<16>> incoming_tango_traffic_encaped_udp_header_1,int<<16>> incoming_tango_traffic_encaped_udp_header_2,int<<16>> incoming_tango_traffic_encaped_udp_header_3);

handle incoming_tango_traffic(int<<48>> incoming_tango_traffic_tango_eth_header_0,int<<48>> incoming_tango_traffic_tango_eth_header_1,int<<16>> incoming_tango_traffic_tango_eth_header_2,int<<32>> incoming_tango_traffic_tango_ip_header_0,int<<16>> incoming_tango_traffic_tango_ip_header_1,int<<8>> incoming_tango_traffic_tango_ip_header_2,int<<8>> incoming_tango_traffic_tango_ip_header_3,int<<64>> incoming_tango_traffic_tango_ip_header_4,int<<64>> incoming_tango_traffic_tango_ip_header_5,int<<64>> incoming_tango_traffic_tango_ip_header_6,int<<64>> incoming_tango_traffic_tango_ip_header_7,int<<16>> incoming_tango_traffic_tango_udp_header_0,int<<16>> incoming_tango_traffic_tango_udp_header_1,int<<16>> incoming_tango_traffic_tango_udp_header_2,int<<16>> incoming_tango_traffic_tango_udp_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_0,int<<16>> incoming_tango_traffic_tango_metrics_header_1,int<<32>> incoming_tango_traffic_tango_metrics_header_2,int<<16>> incoming_tango_traffic_tango_metrics_header_3,int<<8>> incoming_tango_traffic_tango_metrics_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_0,int<<8>> incoming_tango_traffic_encaped_ip_header_1,int<<16>> incoming_tango_traffic_encaped_ip_header_2,int<<16>> incoming_tango_traffic_encaped_ip_header_3,int<<16>> incoming_tango_traffic_encaped_ip_header_4,int<<8>> incoming_tango_traffic_encaped_ip_header_5,int<<8>> incoming_tango_traffic_encaped_ip_header_6,int<<16>> incoming_tango_traffic_encaped_ip_header_7,int<<32>> incoming_tango_traffic_encaped_ip_header_8,int<<32>> incoming_tango_traffic_encaped_ip_header_9,int<<16>> incoming_tango_traffic_encaped_udp_header_0,int<<16>> incoming_tango_traffic_encaped_udp_header_1,int<<16>> incoming_tango_traffic_encaped_udp_header_2,int<<16>> incoming_tango_traffic_encaped_udp_header_3) {

}

event set_signature(int<<8>> set_signature_sig_type,int<<16>> set_signature_sig_idx,int<<8>> set_signature_block_idx,int<<32>> set_signature_curr_signature,int<<32>> set_signature_next_signature);

event set_next_signature(int<<8>> set_next_signature_sig_type,int<<16>> set_next_signature_sig_idx,int<<8>> set_next_signature_block_idx,int<<32>> set_next_signature_next_signature);

handle set_next_signature(int<<8>> set_next_signature_sig_type,int<<16>> set_next_signature_sig_idx,int<<8>> set_next_signature_block_idx,int<<32>> set_next_signature_next_signature) {

}

handle forward_flow(int<<48>> forward_flow_eth_header_0,int<<48>> forward_flow_eth_header_1,int<<16>> forward_flow_eth_header_2,int<<8>> forward_flow_ip_header_0,int<<8>> forward_flow_ip_header_1,int<<16>> forward_flow_ip_header_2,int<<16>> forward_flow_ip_header_3,int<<16>> forward_flow_ip_header_4,int<<8>> forward_flow_ip_header_5,int<<8>> forward_flow_ip_header_6,int<<16>> forward_flow_ip_header_7,int<<32>> forward_flow_ip_header_8,int<<32>> forward_flow_ip_header_9,int<<16>> forward_flow_udp_header_0,int<<16>> forward_flow_udp_header_1,int<<16>> forward_flow_udp_header_2,int<<16>> forward_flow_udp_header_3) {
int<<15>> SequenceNumberManager_increment_ret = 32;
int<<16>> to_immediate_tmp = Array.update(sequence_counters_0,0,SequenceNumberManager_get_curr,0,SequenceNumberManager_next,1);
SequenceNumberManager_increment_ret = (int<<15>>)to_immediate_tmp;
int<<15>> seq_number = SequenceNumberManager_increment_ret;
int<<32>> time_now = Sys.time();
int<<12>> timestamp = [31 : 20]time_now;
int<<1>> block_idx = [2 : 2]timestamp;
int<<1>> BookSignatureManager_sign_ret = 0;
int<<32>> sig_bitstring = 0;
match block_idx with 
| 0 -> {
int<<11>> precompute = (int<<11>>)[14 : 5]seq_number;
sig_bitstring = Array.get(outgoing_book_signature_manager_0,precompute);
}
| _ -> {
int<<11>> to_immediate_tmp = (int<<11>>)[14 : 5]seq_number;
int<<11>> precompute = to_immediate_tmp+1024;
sig_bitstring = Array.get(outgoing_book_signature_manager_0,precompute);
}
int<<5>> bitwhack_index = [4 : 0]seq_number;
match bitwhack_index with 
| 0 -> {
BookSignatureManager_sign_ret = [0 : 0]sig_bitstring;
}
| 1 -> {
BookSignatureManager_sign_ret = [1 : 1]sig_bitstring;
}
| 2 -> {
BookSignatureManager_sign_ret = [2 : 2]sig_bitstring;
}
| 3 -> {
BookSignatureManager_sign_ret = [3 : 3]sig_bitstring;
}
| 4 -> {
BookSignatureManager_sign_ret = [4 : 4]sig_bitstring;
}
| 5 -> {
BookSignatureManager_sign_ret = [5 : 5]sig_bitstring;
}
| 6 -> {
BookSignatureManager_sign_ret = [6 : 6]sig_bitstring;
}
| 7 -> {
BookSignatureManager_sign_ret = [7 : 7]sig_bitstring;
}
| 8 -> {
BookSignatureManager_sign_ret = [8 : 8]sig_bitstring;
}
| 9 -> {
BookSignatureManager_sign_ret = [9 : 9]sig_bitstring;
}
| 10 -> {
BookSignatureManager_sign_ret = [10 : 10]sig_bitstring;
}
| 11 -> {
BookSignatureManager_sign_ret = [11 : 11]sig_bitstring;
}
| 12 -> {
BookSignatureManager_sign_ret = [12 : 12]sig_bitstring;
}
| 13 -> {
BookSignatureManager_sign_ret = [13 : 13]sig_bitstring;
}
| 14 -> {
BookSignatureManager_sign_ret = [14 : 14]sig_bitstring;
}
| 15 -> {
BookSignatureManager_sign_ret = [15 : 15]sig_bitstring;
}
| 16 -> {
BookSignatureManager_sign_ret = [16 : 16]sig_bitstring;
}
| 17 -> {
BookSignatureManager_sign_ret = [17 : 17]sig_bitstring;
}
| 18 -> {
BookSignatureManager_sign_ret = [18 : 18]sig_bitstring;
}
| 19 -> {
BookSignatureManager_sign_ret = [19 : 19]sig_bitstring;
}
| 20 -> {
BookSignatureManager_sign_ret = [20 : 20]sig_bitstring;
}
| 21 -> {
BookSignatureManager_sign_ret = [21 : 21]sig_bitstring;
}
| 22 -> {
BookSignatureManager_sign_ret = [22 : 22]sig_bitstring;
}
| 23 -> {
BookSignatureManager_sign_ret = [23 : 23]sig_bitstring;
}
| 24 -> {
BookSignatureManager_sign_ret = [24 : 24]sig_bitstring;
}
| 25 -> {
BookSignatureManager_sign_ret = [25 : 25]sig_bitstring;
}
| 26 -> {
BookSignatureManager_sign_ret = [26 : 26]sig_bitstring;
}
| 27 -> {
BookSignatureManager_sign_ret = [27 : 27]sig_bitstring;
}
| 28 -> {
BookSignatureManager_sign_ret = [28 : 28]sig_bitstring;
}
| 29 -> {
BookSignatureManager_sign_ret = [29 : 29]sig_bitstring;
}
| 30 -> {
BookSignatureManager_sign_ret = [30 : 30]sig_bitstring;
}
| _ -> {
BookSignatureManager_sign_ret = [31 : 31]sig_bitstring;
}
int<<1>> book_signature = BookSignatureManager_sign_ret;
int<<1>> block_idx = [4 : 4]timestamp;
int<<32>> MetricSignatureManager_sign_ret = 32;
match block_idx with 
| 0 -> {
int<<5>> precompute = (int<<5>>)[3 : 0]timestamp;
MetricSignatureManager_sign_ret = Array.get(outgoing_metric_signature_manager_0,precompute);
}
| _ -> {
int<<5>> to_immediate_tmp = (int<<5>>)[3 : 0]timestamp;
int<<5>> precompute = to_immediate_tmp+16;
MetricSignatureManager_sign_ret = Array.get(outgoing_metric_signature_manager_0,precompute);
}
int<<32>> ts_signature = MetricSignatureManager_sign_ret;
int<<8>> tango_metrics_hdr_0 = 0;
int<<16>> tango_metrics_hdr_1 = hash<<16>>(1,timestamp);
int<<32>> tango_metrics_hdr_2 = ts_signature;
int<<16>> tango_metrics_hdr_3 = (int<<16>>)seq_number;
int<<8>> tango_metrics_hdr_4 = (int<<8>>)book_signature;
int<<16>> precompute = forward_flow_ip_header_2+18;
generate_port (128, incoming_tango_traffic(forward_flow_eth_header_0,forward_flow_eth_header_1,34525,0,precompute,0,0,0,0,0,0,8080,8080,0,0,tango_metrics_hdr_0,tango_metrics_hdr_1,tango_metrics_hdr_2,tango_metrics_hdr_3,tango_metrics_hdr_4,forward_flow_ip_header_0,forward_flow_ip_header_1,forward_flow_ip_header_2,forward_flow_ip_header_3,forward_flow_ip_header_4,forward_flow_ip_header_5,forward_flow_ip_header_6,forward_flow_ip_header_7,forward_flow_ip_header_8,forward_flow_ip_header_9,forward_flow_udp_header_0,forward_flow_udp_header_1,forward_flow_udp_header_2,forward_flow_udp_header_3));
}

handle set_signature(int<<8>> set_signature_sig_type,int<<16>> set_signature_sig_idx,int<<8>> set_signature_block_idx,int<<32>> set_signature_curr_signature,int<<32>> set_signature_next_signature) {
int<<32>> if_precomp = (int<<32>>)set_signature_sig_type-0;
if (if_precomp==0) {
int<<11>> word_addr = [10 : 0]set_signature_sig_idx;
int<<1>> block_idx = [0 : 0]set_signature_block_idx;
int<<32>> block = (int<<32>>)block_idx;
match block with 
| 0 -> {
Array.set(outgoing_book_signature_manager_0,word_addr,set_signature_curr_signature);
}
| _ -> {
int<<11>> precompute = word_addr+1024;
Array.set(outgoing_book_signature_manager_0,precompute,set_signature_curr_signature);
}
} else {
int<<5>> sig_addr = [4 : 0]set_signature_sig_idx;
int<<1>> block_idx = [0 : 0]set_signature_block_idx;
match block_idx with 
| 0 -> {
Array.set(outgoing_metric_signature_manager_0,sig_addr,set_signature_curr_signature);
}
| _ -> {
int<<5>> precompute = sig_addr+16;
Array.set(outgoing_metric_signature_manager_0,precompute,set_signature_curr_signature);
}
}
if (set_signature_next_signature!=0) {
int<<16>> precompute = 1+set_signature_sig_idx;
generate_port (196, set_next_signature(set_signature_sig_type,precompute,set_signature_block_idx,set_signature_next_signature));
} 
}
compute expressions simplified.
