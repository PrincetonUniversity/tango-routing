/**
 * # Description
 * Keep track of all relavent delay metrics
 * 
 * # Methods
 * create() -> SequenceNumberManager.t
 * increment(SequenceNumberManager.t, int<<3>>) -> int<<24>>
 **/
module SequenceNumberManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Increments and returns the current, non-incremented sequence
    * number of a given path.
    * 
    * # Parameters
    * self (t): self
    * path_id (int<<3>>): the path on which the packet is tunneled
    * 
    * # Returns
    * sequence_number (int<<24>>): the current, non-incremented sequence number
    **/
    fun int<<24>> increment (
        t self,
        int<<3>> path_id
    ) [start <= self; end self];
}
{
    type t = {
        Counter.t<<24>> seq_num0;
        Counter.t<<24>> seq_num1;
        Counter.t<<24>> seq_num2;
        Counter.t<<24>> seq_num3;
        Counter.t<<24>> seq_num4;
        Counter.t<<24>> seq_num5;
        Counter.t<<24>> seq_num6;
        Counter.t<<24>> seq_num7;
    }

    constr t create () = {
        seq_num0 = Counter.create(0);
        seq_num1 = Counter.create(0);
        seq_num2 = Counter.create(0);
        seq_num3 = Counter.create(0);
        seq_num4 = Counter.create(0);
        seq_num5 = Counter.create(0);
        seq_num6 = Counter.create(0);
        seq_num7 = Counter.create(0);
    };

    fun int<<24>> increment (
        t self,
        int<<3>> path_id
    ) {
        match path_id with
        | 0 -> { return Counter.add(self#seq_num0, 1); }
        | 1 -> { return Counter.add(self#seq_num1, 1); }
        | 2 -> { return Counter.add(self#seq_num2, 1); }
        | 3 -> { return Counter.add(self#seq_num3, 1); }
        | 4 -> { return Counter.add(self#seq_num4, 1); }
        | 5 -> { return Counter.add(self#seq_num5, 1); }
        | 6 -> { return Counter.add(self#seq_num6, 1); }
        | 7 -> { return Counter.add(self#seq_num7, 1); }
    }
}
