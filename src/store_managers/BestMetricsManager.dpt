include "../Types.dpt"

// Keep track of most performant path
module BestMetricsManager : {
    global type t<<'delay_sum_sz, 'delay_count_sz, 'loss_count_sz, 'tns_cnt_sz,  'path_id_sz>>;
    constr t<<'delay_sum_sz, 'delay_count_sz, 'loss_count_sz, 'tns_cnt_sz,  'path_id_sz>> create ();

   /*
    * Updates the delay from the incoming Tango packets timestamp
    * 
    * PARAMETERS
    * ----------
    * self (t<<'delay_sum_sz, 'delay_count_sz, 'loss_count_sz, 'tns_cnt_sz,  'path_id_sz>>): self
    * path_id (int<<'path_id_sz>>): contending path id
    * loss_metrics (LossMetrics_t<<'loss_count_sz, 'tns_cnt_sz>>): loss metrics found ion that path
    * delay_metrics (DelayMetrics_t<<'delay_sum_sz, 'delay_count_sz>>): delay metrics found on that path
    * 
    * RETURNS
    * -------
    */
    fun BestMetrics_t<<'delay_sum_sz, 'delay_count_sz, 'loss_count_sz, 'tns_cnt_sz, 'path_id_sz>> update (
        t<<'delay_sum_sz, 'delay_count_sz, 'loss_count_sz, 'tns_cnt_sz,  'path_id_sz>> self,
        int<<'path_id_sz>> path_id,
        LossMetrics_t<<'loss_count_sz, 'tns_cnt_sz>> loss_metrics,
        DelayMetrics_t<<'delay_sum_sz, 'delay_count_sz>> delay_metrics
    ) [start <= self; end self];
}
{
    type t<<'delay_sum_sz, 'delay_count_sz, 'loss_count_sz, 'tns_cnt_sz,  'path_id_sz>> = {
        LossMetrics_t<<'loss_count_sz, 'tns_cnt_sz>> best_loss;
        DelayMetrics_t<<'delay_sum_sz, 'delay_count_sz>> best_delay;
        int<<'path_id_sz>> best_loss_id;
        int<<'path_id_sz>> best_delay_id;
    }

    constr t<<'delay_sum_sz, 'delay_count_sz, 'loss_count_sz, 'tns_cnt_sz,  'path_id_sz>> create () = {
        best_loss = {
            loss_count = -1;
            transmission_count = -1;
        };
        best_delay = {
            delay_sum = -1;
            delay_count = -1;
        };
        best_loss_id = -1;
        best_delay_id = -1;
        /* TODO */
    };

    fun BestMetrics_t<<'delay_sum_sz, 'delay_count_sz, 'loss_count_sz, 'tns_cnt_sz, 'path_id_sz>> update (
        t<<'delay_sum_sz, 'delay_count_sz, 'loss_count_sz, 'tns_cnt_sz,  'path_id_sz>> self,
        int<<'path_id_sz>> path_id,
        LossMetrics_t<<'loss_count_sz, 'tns_cnt_sz>> loss_metrics,
        DelayMetrics_t<<'delay_sum_sz, 'delay_count_sz>> delay_metrics
    ) {
        printf("ERROR: `BestMetricsManager.update()` is *unimplemented*");
        return {
            best_delay_metrics = {
                delay_sum = 0;
                delay_count = 0;
            };
            best_delay_id = 0;
            best_loss_metrics = {
                loss_count = 0;
                transmission_count = 0;
            };
            best_loss_id = 0;
        };
        /* TODO */
    }
}
