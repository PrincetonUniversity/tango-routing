/**
 * # Description
 * Manage all precomputed metric signatures
 * 
 * # Methods
 * create() -> MetricSignatureManager.t
 * sign(MetricSignatureManager.t, int, int<<3>>) -> int<<256>>
 * verify(MetricSignatureManager.t, int, int<<3>>, int<<256>>) -> bool
 **/
module MetricSignatureManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Gets a signature for a given timestamp and physical path ID
    * 
    * # Parameters
    * self (t): self
    * timestamp (int<<12>>): timestamp of packet send/receive
    * path_id (int<<3>>): the physcial path ID packet is/was sent on
    * 
    * # Returns
    * signature (int<<256>>): signature of timestamp + path ID
    **/
    fun int<<256>> sign (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id
    ) [start <= self; end self];

   /**
    * # Description
    * Verifies a signature for a given timestamp and physical path ID
    * 
    * # Parameters
    * self (t): self
    * timestamp (int<<12>>): timestamp of packet send/receive
    * path_id (int<<3>>): the physcial path ID packet is/was sent on
    * signature (int<<256 >> signature): signature to validate
    * 
    * # Returns
    * is_valid (bool): if signature is valid
    **/
    fun bool verify (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id,
        int<<256>> signature
    ) [start <= self; end self];
}
{
    type t = {
        Array.t<<256>>[8] signatures;
    }

    constr t create () = {
        signatures = [Array.create(10) for i < 8]; // 10ms control loop
        /* TODO */
    };

    fun int<<256>> sign (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id
    ) {
        printf("ERROR: `MetricSignatureManager.sign()` is *unimplemented*");
        return 0;
        /* TODO */
    }

    fun bool verify (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id,
        int<<256 >> signature
    ) {
       printf("ERROR: `MetricSignatureManager.verify()` is *unimplemented*");
       return false;
        /* TODO */
    }
}
