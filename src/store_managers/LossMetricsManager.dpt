include "../Types.dpt"

symbolic size path_id_sz;
symbolic size tns_cnt_sz;
symbolic size seq_num_sz;
symbolic size loss_count_sz;
symbolic size num_path_ids;

// Keep track of delay metrics
module LossMetricsManager : {
    global type t;
    constr t create ();

   /*
    * Updates the delay from the incoming Tango packets timestamp
    * 
    * PARAMETERS
    * ----------
    * self (t): self
    * sequence_num (int<<seq_num_sz>>): sequence number of packet
    * path_id (int<<path_id_sz>>): the path on which the packet came
    * 
    * RETURNS
    * -------
    * metrics (LossMetrics_t<<loss_count_sz, tns_cnt_sz>>): the calculated metrics
    */
    fun LossMetrics_t<<loss_count_sz, tns_cnt_sz>> update_loss (
        t self,
        int<<seq_num_sz>> sequence_num
    ) [start <= self; end self];

   /*
    * Gets the delay metrics for the path
    * 
    * PARAMETERS
    * ----------
    * self (t): self
    * path_id (int<<path_id_sz>>): the path of interest
    * 
    * RETURNS
    * -------
    * metrics (LossMetrics_t<<loss_count_sz, tns_cnt_sz>>): the calculated metrics
    */
    fun LossMetrics_t<<loss_count_sz, tns_cnt_sz>> get_metrics (
        t self,
        int<<path_id_sz>> path_id
    ) [start <= self; end self];

}
{
    type t = {
        Counter.t<<loss_count_sz>>[num_path_ids] loss_counts;
        Counter.t<<tns_cnt_sz>>[num_path_ids] transmission_counts;
        Array.t<<seq_num_sz>> seen_sequence_nums;
    }

    constr t create () = {
        loss_counts = [Counter.create(0) for x < num_path_ids];
        transmission_counts = [Counter.create(0) for x < num_path_ids];
        seen_sequence_nums = Array.create(size_to_int(num_path_ids));
        /* TODO */
    };

    fun LossMetrics_t<<loss_count_sz, tns_cnt_sz>> update_loss (
        t self,
        int<<seq_num_sz>> sequence_num
    ) {
        printf("ERROR: `LossMetricsManager.update_loss()` is *unimplemented*");
        return {
            loss_count = 0;
            transmission_count = 0;
        };
        /* TODO */
    }

    fun LossMetrics_t<<loss_count_sz, tns_cnt_sz>> get_metrics (
        t self,
        int<<path_id_sz>> path_id
    ) {
       printf("ERROR: `LossMetricsManager.get_metrics()` is *unimplemented*");
        return {
            loss_count = 0;
            transmission_count = 0;
        };
        /* TODO */
    }
}
