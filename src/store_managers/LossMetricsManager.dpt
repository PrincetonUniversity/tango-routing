// Keep track of delay metrics
module LossMetricsManager : {
    global type t<<'num_path_ids, 'path_id_sz, 'loss_count_sz, 'tns_cnt_sz, 'seq_num_sz>>;
    constr t<<'num_path_ids, 'path_id_sz, 'loss_count_sz, 'tns_cnt_sz, 'seq_num_sz>> create();

   /*
    * Updates the delay from the incoming Tango packets timestamp
    * 
    * PARAMETERS
    * ----------
    * self (t<<'num_path_ids, 'path_id_sz, 'loss_count_sz, 'tns_cnt_sz, 'seq_num_sz>>): self
    * sequence_num (int<<'seq_num_sz>>): sequence number of packet
    * path_id (int<<'path_id_sz>>): the path on which the packet came
    * 
    * RETURNS
    * -------
    * metrics (LossMetrics<<'loss_count_sz, 'tns_cnt_sz>>): the calculated metrics
    */
    fun LossMetrics<<'loss_count_sz, 'tns_cnt_sz>> update_loss(t<<'num_path_ids, 'path_id_sz, 'loss_count_sz, 'tns_cnt_sz, 'seq_num_sz>> self, int<<'seq_num_sz>> sequence_num) [start <= self; end self];

   /*
    * Gets the delay metrics for the path
    * 
    * PARAMETERS
    * ----------
    * self (t<<'num_path_ids, 'path_id_sz, 'loss_count_sz, 'tns_cnt_sz, 'seq_num_sz>>): self
    * path_id (int<<'path_id_sz>>): the path of interest
    * 
    * RETURNS
    * -------
    * metrics (LossMetrics<<'loss_count_sz, 'tns_cnt_sz>>): the calculated metrics
    */
    fun LossMetrics<<'loss_count_sz, 'tns_cnt_sz>> get_metrics(t<<'num_path_ids, 'path_id_sz, 'loss_count_sz, 'tns_cnt_sz, 'seq_num_sz>> self, int<<path_id_sz>> path_id) [start <= self; end self];

}
{
    type t<<'num_path_ids, 'path_id_sz, 'loss_count_sz, 'tns_cnt_sz, 'seq_num_sz>> {
        Counter.t<<'loss_count_sz>>['num_path_ids] loss_counts; // TODO: Convert to 
        Counter.t<<'tns_cnt_sz>>['num_path_ids] transmission_counts;
        Array.t<<'seq_num_sz>> seen_sequence_nums;
    }

    constr t<<'num_path_ids, 'path_id_sz, 'loss_count_sz, 'tns_cnt_sz, 'seq_num_sz>> create() {
        loss_counts = Array.create('num_path_ids) // FIXME: Cannot be parametric like this
        delay_counts = [Counter.create(0) for x < 'num_path_ids];
        seen_sequence_nums = Array.create('num_path_ids)
        /* TODO */
    };

    fun LossMetrics<<'loss_count_sz, 'tns_cnt_sz>> update_loss(t<<'num_path_ids, 'path_id_sz, 'loss_count_sz, 'tns_cnt_sz, 'seq_num_sz>> self, int<<'seq_num_sz>> sequence_num) {
        /* TODO */
    }

    fun LossMetrics<<'loss_count_sz, 'tns_cnt_sz>> get_metrics(t<<'num_path_ids, 'path_id_sz, 'loss_count_sz, 'tns_cnt_sz, 'seq_num_sz>> self, int<<path_id_sz>> path_id) {
        /* TODO */
    }
}
