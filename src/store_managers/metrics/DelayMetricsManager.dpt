include "../../Types.dpt"
include "../../Time.dpt"

/**
 * # Description
 * Keep track of delay metrics
 * 
 * # Methods
 * create() -> DelayMetricsManager.t
 * update_delay(DelayMetricsManager.t, int, int<<3>>) -> DelayMetrics_t
 * get_metrics(DelayMetricsManager.t, int, int<<3>>) -> DelayMetrics_t
 **/
module DelayMetricsManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Updates the delay from the incoming Tango packets timestamp
    * 
    * # Parameters
    * self (t): self
    * timestamp (int<<12>>): sequence number to index into pads
    * path_id (int<<3>>): the path on which the packet came
    * 
    * # Returns
    * metrics (DelayMetrics_t): the calculated metrics
    **/
    fun DelayMetrics_t update_delay (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id
    ) [start <= self; end self];

   /**
    * # Description
    * Gets the delay metrics for the path
    * 
    * # Parameters
    * self (t): self
    * path_id (int<<3>>): the path of interest
    * 
    * # Returns
    * metrics (DelayMetrics_t): the calculated metrics
    **/
    fun DelayMetrics_t get_metrics (
        t self,
        int<<3>> path_id
    ) [start <= self; end self];

}
{
    type t = {
        Array.t<<32>> delay_sums;
        Counter.t<<32>> delay_count0;
        Counter.t<<32>> delay_count1;
        Counter.t<<32>> delay_count2;
        Counter.t<<32>> delay_count3;
        Counter.t<<32>> delay_count4;
        Counter.t<<32>> delay_count5;
        Counter.t<<32>> delay_count6;
        Counter.t<<32>> delay_count7;
    }

    constr t create() = {
        delay_sums = Array.create(8);
        delay_count0 = Counter.create(0);
        delay_count1 = Counter.create(0);
        delay_count2 = Counter.create(0);
        delay_count3 = Counter.create(0);
        delay_count4 = Counter.create(0);
        delay_count5 = Counter.create(0);
        delay_count6 = Counter.create(0);
        delay_count7 = Counter.create(0);
    };

    /**
     * # Description
     * Update the running sum of delays with the newest delay
     * measurement and return it.
     **/
    memop update_delay (int<<'sz>> curr_delay_sum, int<<'sz>> new_delay) { 
        return curr_delay_sum + new_delay; // FIXME: No wrap around
    }

    fun DelayMetrics_t update_delay (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id
    ) {
        // Update and get delay 
        int ts_diff = (int<<32>>) (get_time_now_ms() - timestamp);
        int delay_sum = Array.getm(self#delay_sums, path_id, update_delay, ts_diff);

        // Count this packet as seen
        int delay_count = 0;
        match path_id with
        | 0 -> { delay_count = Counter.add(self#delay_count0, 1) + 1; }
        | 1 -> { delay_count = Counter.add(self#delay_count1, 1) + 1; }
        | 2 -> { delay_count = Counter.add(self#delay_count2, 1) + 1; }
        | 3 -> { delay_count = Counter.add(self#delay_count3, 1) + 1; }
        | 4 -> { delay_count = Counter.add(self#delay_count4, 1) + 1; }
        | 5 -> { delay_count = Counter.add(self#delay_count5, 1) + 1; }
        | 6 -> { delay_count = Counter.add(self#delay_count6, 1) + 1; }
        | 7 -> { delay_count = Counter.add(self#delay_count7, 1) + 1; }

        return {
            delay_sum = delay_sum;
            delay_count = delay_count;
        };
    }

    fun DelayMetrics_t get_metrics (
        t self,
        int<<3>> path_id
    ) {
        // Get delay sum
        int delay_sum = Array.get(self#delay_sums, path_id);

        // Get delay count
        int delay_count = 0;
        match path_id with
        | 0 -> { delay_count = Counter.add(self#delay_count0, 0); }
        | 1 -> { delay_count = Counter.add(self#delay_count1, 0); }
        | 2 -> { delay_count = Counter.add(self#delay_count2, 0); }
        | 3 -> { delay_count = Counter.add(self#delay_count3, 0); }
        | 4 -> { delay_count = Counter.add(self#delay_count4, 0); }
        | 5 -> { delay_count = Counter.add(self#delay_count5, 0); }
        | 6 -> { delay_count = Counter.add(self#delay_count6, 0); }
        | 7 -> { delay_count = Counter.add(self#delay_count7, 0); }

        return {
            delay_sum = delay_sum;
            delay_count = delay_count;
        };
    }
}
