include "../Types.dpt"

// Encrypts and decrypts route updates using a one-time pad
module EncryptionManager : {
    global type t;
    constr t create ();

   /*
    * Encrypts a given route update with a one-time pad
    * 
    * PARAMETERS
    * ----------
    * self (t): self
    * traffic_cls (int<<4>>): traffic class to map
    * path_id (int<<3>>): path to map traffic class to
    * 
    * RETURNS
    * -------
    * ciphertext (int<<64>>): encrypted route update
    */
    fun int<<64>> encrypt (
        t self,
        int<<4>> traffic_cls,
        int<<3>> path_id
    ) [start <= self; end self];

   /*
    * Decrypts the route update
    * 
    * PARAMETERS
    * ----------
    * self (t): self
    * ciphertext (int<<64>>): signature to validate
    * 
    * RETURNS
    * -------
    * plaintext (RouteUpdate_t): decrypted route update
    */
    fun RouteUpdate_t decrypt (
        t self,
        int<<64>> ciphertext
    ) [start <= self; end self];
}
{
    type t = {
        Array.t<<64>> one_time_pads;
        Counter.t<<4>> seq_number;
    }

    constr t create () = {
        one_time_pads = Array.create(16);
        seq_number = Counter.create(0);
        /* TODO */
    };

    fun int<<64>> encrypt (
        t self,
        int<<4>> traffic_cls,
        int<<3>> path_id
    ) {
        printf("ERROR: `EncryptionManager.encrypt()` is *unimplemented*");
        return 0;
        /* TODO */
    }

    fun RouteUpdate_t decrypt (
        t self,
        int<<64>> ciphertext
    ) {
        printf("ERROR: `EncryptionManager.decrypt()` is *unimplemented*");
        return {
            is_valid = true;
            traffic_class = 0;
            new_path_id = 0;
        };
        /* TODO */
    }
}
