// Manages all invalid packets for each incoming path
module InvalidPacketManager : {
    global type t<<'num_path_ids, 'path_id_sz, 'invalid_track_sz>>;
    constr t<<'num_path_ids, 'path_id_sz, 'invalid_track_sz>> create ();

   /*
    * Report an invlaid packet.
    * 
    * PARAMETERS
    * ----------
    * self (t<<'num_path_ids, 'path_id_sz, 'invalid_track_sz>>): self
    * path_id (int<<'path_id_sz>>): path upon the invalid packet was found
    */
    fun void found_invalid_packet (
        t<<'num_path_ids, 'path_id_sz, 'invalid_track_sz>> self,
        int<<'path_id_sz>> path_id
    ) [start <= self; end self];
}
{
    type t<<'num_path_ids, 'path_id_sz, 'invalid_track_sz>> = {
        Counter.t<<'invalid_track_sz>>['num_path_ids] invalid_counts;
    }
    
    constr t<<'num_path_ids, 'path_id_sz, 'invalid_track_sz>> create () = {
        invalid_counts = [Counter.create(0) for x < 'num_path_ids];
    };

    fun void found_invalid_packet (
        t<<'num_path_ids, 'path_id_sz, 'invalid_track_sz>> self,
        int<<'path_id_sz>> path_id
    ) {
        printf("ERROR: `InvalidPacketManager.found_invalid_packet()` is *unimplemented*");
        /* TODO */
    }
}
