include "../Types.dpt"

/**
 * # Description
 * Keep track of delay metrics
 * 
 * # Methods
 * create() -> DelayMetricsManager.t
 * update_delay(DelayMetricsManager.t, int, int<<3>>) -> DelayMetrics_t
 * get_metrics(DelayMetricsManager.t, int, int<<3>>) -> DelayMetrics_t
 **/
module DelayMetricsManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Updates the delay from the incoming Tango packets timestamp
    * 
    * # Parameters
    * self (t): self
    * timestamp (int<<12>>): sequence number to index into pads
    * path_id (int<<3>>): the path on which the packet came
    * 
    * # Returns
    * metrics (DelayMetrics_t): the calculated metrics
    **/
    fun DelayMetrics_t update_delay (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id
    ) [start <= self; end self];

   /**
    * # Description
    * Gets the delay metrics for the path
    * 
    * # Parameters
    * self (t): self
    * path_id (int<<3>>): the path of interest
    * 
    * # Returns
    * metrics (DelayMetrics_t): the calculated metrics
    **/
    fun DelayMetrics_t get_metrics (
        t self,
        int<<3>> path_id
    ) [start <= self; end self];

}
{
    type t = {
        Array.t<<32>> delay_sums;
        Counter.t<<32>>[8] delay_counts;
    }

    constr t create() = {
        delay_sums = Array.create(8);
        delay_counts = [Counter.create(0) for x < 8];
    };

    fun DelayMetrics_t update_delay (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id
    ) {
        printf("ERROR: `DelayMetricsManager.update_delay()` is *unimplemented*");
        return {
            delay_sum = 0;
            delay_count = 0;
        };
        /* TODO */
    }

    fun DelayMetrics_t get_metrics (
        t self,
        int<<3>> path_id
    ) {
        printf("ERROR: `DelayMetricsManager.get_metrics()` is *unimplemented*");
        return {
            delay_sum = 0;
            delay_count = 0;
        };
        /* TODO */
    }
}
