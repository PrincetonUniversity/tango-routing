/**
 * # Description
 * Keep track of path-secific sequence numbers.
 * 
 * # Methods
 * create() -> SequenceNumberManager.t
 * increment(SequenceNumberManager.t, int<<8>>) -> int<<16>>
 **/
module SequenceNumberManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Increments and returns the current, non-incremented sequence
    * number of a given path.
    * 
    * # Parameters
    * self (t): self
    * path_id (int<<8>>): the path on which the packet is tunneled
    * 
    * # Returns
    * sequence_number (int<<16>>): the current, non-incremented sequence number
    **/
    fun int<<16>> increment (
        t self
    ) [start <= self; end self];
}
{
    type t = {
        Array.t<<16>> seq_nums;
    }

    constr t create () = {
        seq_nums = Array.create(1);
    };

    /**
     * # Description
     * Set next sequence number for this path.
     **/
    memop next(int<<'sz>> curr, int<<'sz>> inc) {
        return curr + inc;
    }

    /**
     * # Description
     * Get current sequence number for this path.
     **/
    memop get_curr(int<<'sz>> curr, int<<'sz>> inc) {
        return curr;
    }

    fun int<<16>> increment (
        t self
    ) {
        return Array.update(
            self#seq_nums,
            0,
            get_curr,
            0,
            next,
            (int<<16>>) 1
        );
    }
}
