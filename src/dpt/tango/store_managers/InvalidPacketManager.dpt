/**
 * # Description
 * Manage all invalid packets for each incoming path
 * 
 * # Methods
 * create() -> InvalidPacketManager.t
 * found_invalid_packet(InvalidPacketManager.t, int<<8>>) -> void
 **/
module InvalidPacketManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Report an invlaid packet.
    * 
    * # Parameters
    * self (t): self
    * path_id (int<<8>>): path upon the invalid packet was found
    **/
    fun void found_invalid_packet (
        t self,
        int<<8>> path_id
    ) [start <= self; end self];
}
{
    type t = {
        Array.t<<32>> invalid_counts;
    }
    
    constr t create () = {
        invalid_counts = Array.create(8);
    };

    /**
     * # Description
     * Increment stored value by a given amount.
     **/
    memop increment(int<<'sz>> curr, int<<'sz>> inc_by) {
        return curr + inc_by;
    }

    fun void found_invalid_packet (
        t self,
        int<<8>> path_id
    ) {
        printf("Found invalid packet on path: %d", path_id);

        Array.setm(self#invalid_counts, path_id, increment, 1);
    }
}
