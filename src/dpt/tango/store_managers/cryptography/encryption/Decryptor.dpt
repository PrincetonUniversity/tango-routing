include "../../../Types.dpt"

/**
 * # Description
 * Encrypt and decrypt route updates using a one-time pad
 * 
 * # Methods
 * create() -> Decryptor.t
 * decrypt(Decryptor.t, TaggedCiphertext_t) -> EncodedUpdate_t
 **/
module Decryptor : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Decrypt the route update.
    * 
    * # Parameters
    * self (t): self
    * tagged_ciphertext (TaggedCiphertext_t): ciphertext tagged with sequnce num
    * 
    * # Returns
    * plaintext (EncodedUpdate_t): decrypted route update
    **/
    fun EncodedUpdate_t decrypt (
        t self,
        TaggedCiphertext_t tagged_ciphertext
    ) [start <= self; end self];
}
{
    type t = {
        Array.t<<32>> corresponding_otps0;
        Array.t<<32>> corresponding_otps1;
    }

    constr t create () = {
        corresponding_otps0 = Array.create(16);
        corresponding_otps1 = Array.create(16);
    };

    fun EncodedUpdate_t decrypt (
        t self,
        TaggedCiphertext_t tagged_ciphertext
    ) {
        int<<32>> pad0 = Array.get(self#corresponding_otps0, tagged_ciphertext#seq_num_tag);
        int<<32>> pad1 = Array.get(self#corresponding_otps1, tagged_ciphertext#seq_num_tag);

        return {
            encoding_lo = tagged_ciphertext#ciphertext_lo ^^ pad0;
            encoding_hi = tagged_ciphertext#ciphertext_hi ^^ pad1;
        };
    }
}
