include "../../../Types.dpt"

/**
 * # Description
 * Encrypt route updates using a one-time pad
 * 
 * # Methods
 * create() -> Encryptor.t
 * encrypt(Encryptor.t, EncodedUpdate_t) -> TaggedCiphertext_t
 **/
module Encryptor : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Encrypt a given route update with a one-time pad
    * 
    * # Parameters
    * self (t): self
    * encoded_update (EncodedUpdate_t): fully encoded route mapping update
    * 
    * # Returns
    * ciphertext (TaggedCiphertext_t): encrypted route update
    **/
    fun TaggedCiphertext_t encrypt (
        t self,
        EncodedUpdate_t encoded_update
    ) [start <= self; end self];
}
{
    type t = {
        Array.t<<4>> seq_number;
        Array.t<<32>> one_time_pads0;
        Array.t<<32>> one_time_pads1;
    }

    constr t create () = {
        seq_number = Array.create(1);
        one_time_pads0 = Array.create(16);
        one_time_pads1 = Array.create(16);
    };

    /**
     * # Description
     * Get next sequence number for pads.
     **/
    memop next(int<<'sz>> curr, int<<'sz>> ignore) {
        return curr + 1;
    }

    fun TaggedCiphertext_t encrypt (
        t self,
        EncodedUpdate_t encoded_update
    ) {
        int<<4>> curr_seq_num = Array.update(self#seq_number, 0, next, 1, next, 1);
        int<<32>> pad0 = Array.get(self#one_time_pads0, curr_seq_num);
        int<<32>> pad1 = Array.get(self#one_time_pads1, curr_seq_num);

        return {
            seq_num_tag = curr_seq_num;
            ciphertext_lo = encoded_update#encoding_lo ^^ pad0;
            ciphertext_hi = encoded_update#encoding_hi ^^ pad1;
        };
    }
}
