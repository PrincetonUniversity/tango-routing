/**
 * # Description
 * Manage all sequence number book signatures
 * 
 * # Methods
 * create() -> BookSignatureManager.t
 * sign(BookSignatureManager.t, int<<16>>, int<<3>>) -> int<<1>>
 * verify(BookSignatureManager.t, int<<16>>, int<<3>>, int<<1>>) -> bool
 **/
module BookSignatureManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Gets a signature for a given sequence number and physical path ID
    * 
    * # Parameters
    * self (t): self
    * seq_number (int<<16>>): sequence number to sign
    * path_id (int<<3>>): path ID of associated sequence number
    * 
    * # Returns
    * signature (int<<1>>): signature of timestamp + path ID
    **/
    fun int<<1>> sign (
        t self,
        int<<16>> seq_number
    ) [start <= self; end self];

   /**
    * # Description
    * Verifies a signature for a given timestamp and physical path ID
    * 
    * # Parameters
    * self (t): self
    * seq_number (int<<16>>): sequence number signed
    * path_id (int<<3>>): path ID of associated sequence number
    * signature (int<<1>>): signature to validate
    * 
    * # Returns
    * is_valid (bool): if signature is valid
    **/
    // fun bool verify (
    //     t self,
    //     int<<16>> seq_number,
    //     int<<1>> signature
    // ) [start <= self; end self];
}
{
    type t = {
        Array.t<<32>> onebit_signatures;
    }

    constr t create () = {
        onebit_signatures = Array.create(2048); // 2^16 / 32 = 2^11 = 2048
    };

    fun int<<1>> sign (
        t self,
        int<<16>> seq_number
    ) {
        int<<32>> sig_bitstring = Array.get(self#onebit_signatures, (seq_number[15:5]));
        match (seq_number[4:0]) with
        | 0 -> { return sig_bitstring[0:0]; }
        
    }
}
