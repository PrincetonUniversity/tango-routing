/**
 * # Description
 * Manage all sequence number book signatures
 * 
 * # Methods
 * create() -> BookSignatureManager.t
 * sign(BookSignatureManager.t, int<<15>>, int<<3>>) -> int<<1>>
 * verify(BookSignatureManager.t, int<<15>>, int<<3>>, int<<1>>) -> bool
 **/
module BookSignatureManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Gets a signature for a given sequence number and physical path ID
    * 
    * # Parameters
    * self (t): self
    * seq_number (int<<15>>): sequence number to sign
    * path_id (int<<3>>): path ID of associated sequence number
    * 
    * # Returns
    * signature (int<<1>>): signature of timestamp + path ID
    **/
    fun int<<1>> sign (
        t self,
        int<<15>> seq_number,
        int<<1>> block_idx
    ) [start <= self; end self];

    /**
    * # Description
    * Set a signature word (32 signatures) for a given word address
    * 
    * # Parameters
    * self (t): self
    * word_addr (int<<11>>): index of which signature word to populate
    * signature (int<<32>>): path ID of associated sequence number
    * block_idx (int<<1>>): block which to write to in book
    **/
    fun void set_signature_word (
        t self,
        int<<10>> word_addr,
        int<<32>> signature,
        int<<1>> block_idx
    ) [start <= self; end self];

   /**
    * # Description
    * Verifies a signature for a given timestamp and physical path ID
    * 
    * # Parameters
    * self (t): self
    * seq_number (int<<15>>): sequence number signed
    * path_id (int<<3>>): path ID of associated sequence number
    * signature (int<<1>>): signature to validate
    * 
    * # Returns
    * is_valid (bool): if signature is valid
    **/
    // fun bool verify (
    //     t self,
    //     int<<15>> seq_number,
    //     int<<1>> signature
    // ) [start <= self; end self];
}
{
    type t = {
        Array.t<<32>> onebit_signatures;
    }

    constr t create () = {
        onebit_signatures = Array.create(2048); // 2^16 / 32 = 2^11 = 2048
    };

    fun int<<1>> sign (
        t self,
        int<<15>> seq_number,
        int<<1>> block_idx
    ) {
        int<<32>> sig_bitstring = 0;
        match (block_idx) with
        | 0 -> { sig_bitstring = Array.get(self#onebit_signatures, ((int<<11>>) seq_number[14:5])); }
        | _ -> { sig_bitstring = Array.get(self#onebit_signatures, 1024 + ((int<<11>>) (seq_number[14:5]))); }

        int<<5>> bitwhack_index = seq_number[4:0]; // Needed to satisfy Lucid compiler
        match (bitwhack_index) with
        | 0 -> { return sig_bitstring[0:0]; }
        | 1 -> { return sig_bitstring[1:1]; }
        | 2 -> { return sig_bitstring[2:2]; }
        | 3 -> { return sig_bitstring[3:3]; }
        | 4 -> { return sig_bitstring[4:4]; }
        | 5 -> { return sig_bitstring[5:5]; }
        | 6 -> { return sig_bitstring[6:6]; }
        | 7 -> { return sig_bitstring[7:7]; }
        | 8 -> { return sig_bitstring[8:8]; }
        | 9 -> { return sig_bitstring[9:9]; }
        | 10 -> { return sig_bitstring[10:10]; }
        | 11 -> { return sig_bitstring[11:11]; }
        | 12 -> { return sig_bitstring[12:12]; }
        | 13 -> { return sig_bitstring[13:13]; }
        | 14 -> { return sig_bitstring[14:14]; }
        | 15 -> { return sig_bitstring[15:15]; }
        | 16 -> { return sig_bitstring[16:16]; }
        | 17 -> { return sig_bitstring[17:17]; }
        | 18 -> { return sig_bitstring[18:18]; }
        | 19 -> { return sig_bitstring[19:19]; }
        | 20 -> { return sig_bitstring[20:20]; }
        | 21 -> { return sig_bitstring[21:21]; }
        | 22 -> { return sig_bitstring[22:22]; }
        | 23 -> { return sig_bitstring[23:23]; }
        | 24 -> { return sig_bitstring[24:24]; }
        | 25 -> { return sig_bitstring[25:25]; }
        | 26 -> { return sig_bitstring[26:26]; }
        | 27 -> { return sig_bitstring[27:27]; }
        | 28 -> { return sig_bitstring[28:28]; }
        | 29 -> { return sig_bitstring[29:29]; }
        | 30 -> { return sig_bitstring[30:30]; }
        | _ -> { return sig_bitstring[31:31]; }
    }

    fun void set_signature_word (
        t self,
        int<<10>> word_addr,
        int<<32>> signature,
        int<<1>> block_idx
    ) {
        int<<32>> block = (int<<32>>) block_idx;
        match (block) with
        | 0 -> { Array.set(self#onebit_signatures, ((int<<11>>) word_addr), signature); }
        | _ -> { Array.set(self#onebit_signatures, 1024 + ((int<<11>>) word_addr), signature); }
    }
}
