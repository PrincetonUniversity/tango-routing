/**
 * # Description
 * Manage all precomputed metric signatures
 * 
 * # Methods
 * create() -> MetricSignatureManager.t
 * sign(MetricSignatureManager.t, int, int<<3>>) -> int<<32>>
 * verify(MetricSignatureManager.t, int, int<<3>>, int<<32>>) -> bool
 **/
module MetricSignatureManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Gets a signature for a given timestamp and physical path ID
    * 
    * # Parameters
    * self (t): self
    * timestamp (int<<12>>): timestamp of packet send/receive
    * path_id (int<<3>>): the physcial path ID packet is/was sent on
    * 
    * # Returns
    * signature (int<<32>>): signature of timestamp + path ID
    **/
    fun int<<32>> sign (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id
    ) [start <= self; end self];

   /**
    * # Description
    * Verifies a signature for a given timestamp and physical path ID
    * 
    * # Parameters
    * self (t): self
    * timestamp (int<<12>>): timestamp of packet send/receive
    * path_id (int<<3>>): the physcial path ID packet is/was sent on
    * signature (int<<32>> signature): signature to validate
    * 
    * # Returns
    * is_valid (bool): if signature is valid
    **/
    fun bool verify (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id,
        int<<32>> signature
    ) [start <= self; end self];

   /**
    * # Description
    * Let the control plane update a signature.
    * 
    * # Parameters
    * self (t): self
    * path_id (int<<3>>): the physcial path ID packet is/was sent on
    * timestamp (int<<12>>): timestamp of packet send/receive
    * signature (int<<32>> signature): signature to validate
    **/
    fun void control_set (
        t self,
        int<<3>> path_id,
        int<<12>> timestamp,
        int<<32>> signature
    ) [start <= self; end self];
}
{
    type t = {
        Array.t<<32>> signatures0;
        Array.t<<32>> signatures1;
        Array.t<<32>> signatures2;
        Array.t<<32>> signatures3;
        Array.t<<32>> signatures4;
        Array.t<<32>> signatures5;
        Array.t<<32>> signatures6;
        Array.t<<32>> signatures7;
    }

    constr t create () = {
        // ASSUMPTION:16ms control loop
        signatures0 = Array.create(16);
        signatures1 = Array.create(16);
        signatures2 = Array.create(16);
        signatures3 = Array.create(16);
        signatures4 = Array.create(16);
        signatures5 = Array.create(16);
        signatures6 = Array.create(16);
        signatures7 = Array.create(16);
    };

    fun int<<32>> sign (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id
    ) {
        match path_id with
        | 0 -> { return Array.get(self#signatures0, timestamp[3:0]); }
        | 1 -> { return Array.get(self#signatures1, timestamp[3:0]); }
        | 2 -> { return Array.get(self#signatures2, timestamp[3:0]); }
        | 3 -> { return Array.get(self#signatures3, timestamp[3:0]); }
        | 4 -> { return Array.get(self#signatures4, timestamp[3:0]); }
        | 5 -> { return Array.get(self#signatures5, timestamp[3:0]); }
        | 6 -> { return Array.get(self#signatures6, timestamp[3:0]); }
        | 7 -> { return Array.get(self#signatures7, timestamp[3:0]); }
    }

    fun bool verify (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id,
        int<<32>> signature
    ) {
       match path_id with
        | 0 -> {
            return Array.get(self#signatures0, timestamp[3:0]) == signature;
        }
        | 1 -> {
            return Array.get(self#signatures1, timestamp[3:0]) == signature;
        }
        | 2 -> {
            return Array.get(self#signatures2, timestamp[3:0]) == signature;
        }
        | 3 -> {
            return Array.get(self#signatures3, timestamp[3:0]) == signature;
        }
        | 4 -> {
            return Array.get(self#signatures4, timestamp[3:0]) == signature;
        }
        | 5 -> {
            return Array.get(self#signatures5, timestamp[3:0]) == signature;
        }
        | 6 -> {
            return Array.get(self#signatures6, timestamp[3:0]) == signature;
        }
        | 7 -> {
            return Array.get(self#signatures7, timestamp[3:0]) == signature;
        }
    }

    fun void control_set (
        t self,
        int<<3>> path_id,
        int<<12>> timestamp,
        int<<32>> signature
    ) {
        match path_id with
        | 0 -> { Array.set(self#signatures0, timestamp, signature); }
        | 1 -> { Array.set(self#signatures1, timestamp, signature); }
        | 2 -> { Array.set(self#signatures2, timestamp, signature); }
        | 3 -> { Array.set(self#signatures3, timestamp, signature); }
        | 4 -> { Array.set(self#signatures4, timestamp, signature); }
        | 5 -> { Array.set(self#signatures5, timestamp, signature); }
        | 6 -> { Array.set(self#signatures6, timestamp, signature); }
        | 7 -> { Array.set(self#signatures7, timestamp, signature); }
    }
}

// FIXME: Woof... this is wildly out of sync
