/**
 * # Description
 * Manage all precomputed metric signatures
 * 
 * # Methods
 * create() -> MetricSignatureManager.t
 * sign(MetricSignatureManager.t, int, int<<3>>) -> int<<32>>
 * verify(MetricSignatureManager.t, int, int<<3>>, int<<32>>) -> bool
 **/
module MetricSignatureManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Gets a signature for a given timestamp and physical path ID
    * 
    * # Parameters
    * self (t): self
    * timestamp (int<<12>>): timestamp of packet send/receive
    * path_id (int<<3>>): the physcial path ID packet is/was sent on
    * 
    * # Returns
    * signature (int<<32>>): signature of timestamp + path ID
    **/
    fun int<<32>> sign (
        t self,
        int<<12>> timestamp
    ) [start <= self; end self];

   /**
    * # Description
    * Verifies a signature for a given timestamp and physical path ID
    * 
    * # Parameters
    * self (t): self
    * timestamp (int<<12>>): timestamp of packet send/receive
    * path_id (int<<3>>): the physcial path ID packet is/was sent on
    * signature (int<<32>> signature): signature to validate
    * 
    * # Returns
    * is_valid (bool): if signature is valid
    **/
    fun bool verify (
        t self,
        int<<12>> timestamp,
        int<<32>> signature
    ) [start <= self; end self];
}
{
    type t = {
        Array.t<<32>> ts_signatures;
    }

    constr t create () = {
        // ASSUMPTION:16ms control loop
        ts_signatures = Array.create(32);
    };

    fun int<<32>> sign (
        t self,
        int<<12>> timestamp
    ) {
        return Array.get(self#ts_signatures, timestamp[4:0]);
    }

    fun bool verify (
        t self,
        int<<12>> timestamp,
        int<<32>> signature
    ) {
       return Array.get(self#ts_signatures, timestamp[4:0]) == signature;
    }
}

// FIXME: Woof... this is wildly out of sync
