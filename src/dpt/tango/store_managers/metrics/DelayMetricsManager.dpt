include "../../Types.dpt"
include "../../Time.dpt"

/**
 * # Description
 * Keep track of delay metrics
 * 
 * # Methods
 * create() -> DelayMetricsManager.t
 * update_delay(DelayMetricsManager.t, int, int<<3>>) -> int<<32>>
 * get_metrics(DelayMetricsManager.t, int, int<<3>>) -> int<<32>>
 **/
module DelayMetricsManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Updates the delay from the incoming Tango packets timestamp
    * 
    * # Parameters
    * self (t): self
    * timestamp (int<<12>>): sequence number to index into pads
    * path_id (int<<3>>): the path on which the packet came
    * 
    * # Returns
    * metrics (int<<32>>): the calculated metrics
    **/
    fun int<<32>> update_delay (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id
    ) [start <= self; end self];

}
{
    type t = {
        Counter.t<<5>> delay_count0;
        Counter.t<<5>> delay_count1;
        Counter.t<<5>> delay_count2;
        Counter.t<<5>> delay_count3;
        Counter.t<<5>> delay_count4;
        Counter.t<<5>> delay_count5;
        Counter.t<<5>> delay_count6;
        Counter.t<<5>> delay_count7;
        Array.t<<32>> delay_sums;
        Array.t<<32>> delay_avgs;
    }

    constr t create() = {
        delay_count0 = Counter.create(0);
        delay_count1 = Counter.create(0);
        delay_count2 = Counter.create(0);
        delay_count3 = Counter.create(0);
        delay_count4 = Counter.create(0);
        delay_count5 = Counter.create(0);
        delay_count6 = Counter.create(0);
        delay_count7 = Counter.create(0);
        delay_sums = Array.create(8);
        delay_avgs = Array.create(8);
    };

    /**
     * # Description
     * Update the stored average delay.
     **/
    memop update_delay_avg (
        int<<'sz>> curr_delay_avg,
        int<<'sz>> delay_sum,
        int<<'sz>> curr_count
    ) {
        bool should_reset = curr_count > 30;

        if (should_reset) {
            cell1 = delay_sum;
        }

        if (true) { return cell1; }
    }

    /**
     * # Description
     * Update the stored delay sum.
     **/
    memop update_delay_sum (
        int<<'sz>> curr_delay_sum,
        int<<'sz>> new_delay,
        int<<'sz>> curr_count
    ) {
        bool should_reset = curr_count > 30;

        if (should_reset) {
            cell1 = 0;
        } else {
            if (true) { cell1 = curr_delay_sum + new_delay; }
        }

        if (should_reset) { return curr_delay_sum + new_delay; }
    }


    fun int<<32>> update_delay (
        t self,
        int<<12>> timestamp,
        int<<3>> path_id
    ) {
        // Count this packet as seen
        int delay_count = 0;
        match path_id with
        | 0 -> { delay_count = (int<<32>>) Counter.add(self#delay_count0, 1) + 1; }
        | 1 -> { delay_count = (int<<32>>) Counter.add(self#delay_count1, 1) + 1; }
        | 2 -> { delay_count = (int<<32>>) Counter.add(self#delay_count2, 1) + 1; }
        | 3 -> { delay_count = (int<<32>>) Counter.add(self#delay_count3, 1) + 1; }
        | 4 -> { delay_count = (int<<32>>) Counter.add(self#delay_count4, 1) + 1; }
        | 5 -> { delay_count = (int<<32>>) Counter.add(self#delay_count5, 1) + 1; }
        | 6 -> { delay_count = (int<<32>>) Counter.add(self#delay_count6, 1) + 1; }
        | 7 -> { delay_count = (int<<32>>) Counter.add(self#delay_count7, 1) + 1; }

        // Update and get delay
        int<<12>> curr_time = get_time_now_ms();
        int new_delay = (int<<32>>) (curr_time - timestamp);

        // Update delay sums
        int<<32>> delay_sum = Array.update_complex(
            self#delay_sums,
            path_id,
            update_delay_sum,
            new_delay,
            delay_count,
            0
        );

        // Update average delay
        int<<32>> delay_avg = Array.update_complex(
            self#delay_avgs,
            path_id,
            update_delay_avg,
            delay_sum,
            delay_count,
            0
        );

        // Divide by '32'
        return (int<<32>>) delay_avg[31:5];
    }
}
