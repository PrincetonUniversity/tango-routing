include "../../Types.dpt"

/**
 * # Description
 * Keep track of most performant path
 * 
 * # Methods
 * create() -> BestMetricsManager.t
 * update(BestMetricsManager.t, int<<3>>, int<<32>>, int<<32>>) -> BestMetrics_t
 **/
module BestMetricsManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Updates the delay from the incoming Tango packets timestamp
    * 
    * # Parameters
    * self (t): self
    * path_id (int<<3>>): contending path id
    * loss_metrics (int<<32>>): loss metrics found ion that path
    * delay_metrics (int<<32>>): delay metrics found on that path
    * 
    * # Returns
    * best_metrics (BestMetrics_t): the most performant path metrics
    **/
    fun BestMetrics_t update (
        t self,
        int<<3>> path_id,
        int<<32>> loss_metrics,
        int<<32>> delay_metrics
    ) [start <= self; end self];
}
{
    type t = {
        PairArray.t<<32>> best_loss;
        PairArray.t<<32>> best_delay;
    }

    constr t create () = {
        best_loss = PairArray.create(1);
        best_delay = PairArray.create(1);
    };

    /**
    * # Description
    * Update the metric stored to the new value if it is lesser, and
    * therefore better.
    **/
    memop choose_lower (
        int<<'sz>> curr_metric,
        int<<'sz>> curr_winner,
        int<<'sz>> new_metric,
        int<<'sz>> new_path_id
    ) {
        bool new_winner = curr_metric < new_metric;

        if (new_winner) {
            cell1 = new_metric;
        }

        if (new_winner) {
            cell2 = new_path_id;
        }

        if (true) { return cell2; }
    }

    fun BestMetrics_t update (
        t self,
        int<<3>> path_id,
        int<<32>> loss_metrics,
        int<<32>> delay_metrics
    ) {
        // Update best metrics
        int<<3>> winning_loss_id = (int<<3>>) PairArray.update(
            self#best_loss,
            0,
            choose_lower,
            loss_metrics,
            (int<<32>>) path_id,
            0
        );

        int<<3>> winning_delay_id = (int<<3>>) PairArray.update(
            self#best_delay,
            0,
            choose_lower,
            delay_metrics,
            (int<<32>>) path_id,
            0
        );

        // Construct best metrics
        return {
            best_delay_id = winning_delay_id;
            best_loss_id = winning_loss_id;
        };
    }
}
