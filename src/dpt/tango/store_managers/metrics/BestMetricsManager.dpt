include "../../Types.dpt"

/**
 * # Description
 * Keep track of most performant path
 * 
 * # Methods
 * create() -> BestMetricsManager.t
 * update(BestMetricsManager.t, int<<3>>, int<<32>>, int<<32>>) -> BestMetrics_t
 **/
module BestMetricsManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Updates the delay from the incoming Tango packets timestamp
    * 
    * # Parameters
    * self (t): self
    * path_id (int<<3>>): contending path id
    * loss_metrics (int<<32>>): loss metrics found ion that path
    * delay_metrics (int<<32>>): delay metrics found on that path
    * 
    * # Returns
    * best_metrics (BestMetrics_t): the most performant path metrics
    **/
    fun BestMetrics_t update (
        t self,
        int<<3>> path_id,
        int<<32>> loss_metrics,
        int<<32>> delay_metrics
    ) [start <= self; end self];
}
{
    type t = {
        Array.t<<32>> best_loss_val;
        Array.t<<32>> best_delay_val;
        Array.t<<3>> best_loss_path;
        Array.t<<3>> best_delay_path;
    }

    constr t create () = {
        best_loss_val = Array.create(1);
        best_delay_val = Array.create(1);
        best_loss_path = Array.create(1);
        best_delay_path = Array.create(1);
    };

   /**
     * # Description
     * Update the metric stored to the new value if it is lesser, and
     * therefore better.
     **/
    memop choose_lower (
        int<<'sz>> curr_metric,
        int<<'sz>> new_metric,
        int<<'sz>> path_id
    ) { 
        bool new_winner_exists = curr_metric > new_metric;

        if (new_winner_exists) {
            cell1 = new_metric;
        }

        if (new_winner_exists) { return path_id; }
    }

    fun BestMetrics_t update (
        t self,
        int<<3>> path_id,
        int<<32>> loss_metrics,
        int<<32>> delay_metrics
    ) {
        // Update best metrics
        int<<32>> loss_result = Array.update_complex(
            self#best_loss_val,
            0,
            choose_lower,
            loss_metrics,
            (int<<32>>) path_id,
            0xFFFF
        );

        int<<32>> delay_result = Array.update_complex(
            self#best_delay_val,
            0,
            choose_lower,
            delay_metrics,
            (int<<32>>) path_id,
            0xFFFF
        );

        // Update best path ids
        bool isnt_loss_winner = loss_result == 0xFFFF;
        int<<3>> winning_loss_id = 0;
        if (isnt_loss_winner) {
            winning_loss_id = Array.get(self#best_loss_path, 0);
        } else {
            winning_loss_id = path_id;
            Array.set(self#best_loss_path, 0, path_id);
        }

        bool isnt_delay_winner = delay_result == 0xFFFF;
        int<<3>> winning_delay_id = 0;
        if (isnt_delay_winner) {
            winning_delay_id = Array.get(self#best_delay_path, 0);
        } else {
            winning_delay_id = path_id;
            Array.set(self#best_delay_path, 0, path_id);
        }

        // Construct best metrics
        return {
            best_delay_id = winning_delay_id;
            best_loss_id = winning_loss_id;
        };
    }
}
