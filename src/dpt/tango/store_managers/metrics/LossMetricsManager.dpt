include "../../Types.dpt"

/**
 * # Description
 * Keep track of loss metrics
 * 
 * # Methods
 * create() -> LossMetricsManager.t
 * update_loss(LossMetricsManager.t, int<<24>>, int<<3>>) -> int<<32>>
 * get_metrics(LossMetricsManager.t, int, int<<3>>) -> int<<32>>
 **/
module LossMetricsManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Updates the loss from the incoming Tango packets sequence number.
    * 
    * # Parameters
    * self (t): self
    * sequence_num (int<<24>>): sequence number of packet
    * path_id (int<<3>>): the path on which the packet came
    * 
    * # Returns
    * metrics (int<<32>>): the calculated metrics
    **/
    fun int<<32>> update_loss (
        t self,
        int<<24>> sequence_num,
        int<<3>> path_id
    ) [start <= self; end self];
}
{
    type t = {
        Counter.t<<6>> loss_counts0;
        Counter.t<<6>> loss_counts1;
        Counter.t<<6>> loss_counts2;
        Counter.t<<6>> loss_counts3;
        Counter.t<<6>> loss_counts4;
        Counter.t<<6>> loss_counts5;
        Counter.t<<6>> loss_counts6;
        Counter.t<<6>> loss_counts7;
        Array.t<<24>> seq_num_tracker;
        Array.t<<32>> loss_sums;
        Array.t<<32>> loss_avgs;
    }

    constr t create () = {
        loss_counts0 = Counter.create(0);
        loss_counts1 = Counter.create(0);
        loss_counts2 = Counter.create(0);
        loss_counts3 = Counter.create(0);
        loss_counts4 = Counter.create(0);
        loss_counts5 = Counter.create(0);
        loss_counts6 = Counter.create(0);
        loss_counts7 = Counter.create(0);
        seq_num_tracker = Array.create(8);
        loss_sums = Array.create(8);
        loss_avgs = Array.create(8);
    };

    /**
     * # Description
     * Update the stored loss sum.
     **/
    memop get_loss_sum (
        int<<'sz>> curr_loss_sum,
        int<<'sz>> new_loss
    ) {
        return curr_loss_sum + new_loss;
    }

    memop reset_loss_sum (
        int<<'sz>> curr_loss_sum,
        int<<'sz>> new_loss
    ) {
        return 0;
    }
     
    /**
     * # Description
     * Update the stored average.
     **/
    memop update_loss_avg (
        int<<'sz>> curr_loss_avg,
        int<<'sz>> loss_sum,
        int<<'sz>> avg_counter
    ) {
        bool should_reset = avg_counter > 62;

        if (should_reset) {
            cell1 = loss_sum;
        }

        if (true) { return cell1; }
    }

    /**
     * # Description
     * Store the larger sequence number. 
     **/
    memop store_larger (int<<'sz>> curr_seq_num, int<<'sz>> new_seq_num) {
        if (curr_seq_num < new_seq_num) {
            return new_seq_num;
        } else {
            return curr_seq_num;
        }
    }

    /**
     * # Description
     * Get the loss between this and the previously seen sequence number. 
     **/
    memop calc_loss (int<<'sz>> curr_seq_num, int<<'sz>> new_seq_num) {
        if (curr_seq_num + 1 < new_seq_num) {
            return new_seq_num - curr_seq_num;
        } else {
            return 0;
        }
    }

    fun int<<32>> update_loss (
        t self,
        int<<24>> sequence_num,
        int<<3>> path_id
    ) {
        // Update loss counters
        int<<32>> curr_cnt = 0;
        match path_id with
        | 0 -> { curr_cnt = (int<<32>>) Counter.add(self#loss_counts0, 1); }
        | 1 -> { curr_cnt = (int<<32>>) Counter.add(self#loss_counts1, 1); }
        | 2 -> { curr_cnt = (int<<32>>) Counter.add(self#loss_counts2, 1); }
        | 3 -> { curr_cnt = (int<<32>>) Counter.add(self#loss_counts3, 1); }
        | 4 -> { curr_cnt = (int<<32>>) Counter.add(self#loss_counts4, 1); }
        | 5 -> { curr_cnt = (int<<32>>) Counter.add(self#loss_counts5, 1); }
        | 6 -> { curr_cnt = (int<<32>>) Counter.add(self#loss_counts6, 1); }
        | 7 -> { curr_cnt = (int<<32>>) Counter.add(self#loss_counts7, 1); }

        // Calculate loss and updated last seen sequence number
        int<<32>> loss_found = (int<<32>>) Array.update(
            self#seq_num_tracker,
            path_id,
            calc_loss,
            sequence_num,
            store_larger,
            sequence_num
        );

        // Update loss sum
        int<<32>> curr_loss_sum = 0;
        if (curr_cnt > 62) {
            curr_loss_sum = Array.update(
                self#loss_sums,
                path_id,
                get_loss_sum,
                loss_found,
                reset_loss_sum,
                0
            );
        } else {
            curr_loss_sum = Array.update(
                self#loss_sums,
                path_id,
                get_loss_sum,
                loss_found,
                get_loss_sum,
                loss_found
            );
        }

        // Update loss average
        int<<32>> avg_loss = 0;
        if (curr_cnt > 62) {
            avg_loss = curr_loss_sum;
            Array.set(self#loss_avgs, path_id, curr_loss_sum);
        } else {
            avg_loss = Array.get(self#loss_avgs, path_id);
        }

        printf("loss: %d, loss-sum: %d, loss-avg: %d", loss_found, curr_loss_sum, avg_loss);

        return (int<<32>>) avg_loss[31:6]; // 'divide' by 64
    }
}
