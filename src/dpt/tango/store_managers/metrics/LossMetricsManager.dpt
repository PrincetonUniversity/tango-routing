include "../../Types.dpt"

/**
 * # Description
 * Keep track of loss metrics
 * 
 * # Methods
 * create() -> LossMetricsManager.t
 * update_loss(LossMetricsManager.t, int<<24>>, int<<3>>) -> int<<32>>
 * get_metrics(LossMetricsManager.t, int, int<<3>>) -> int<<32>>
 **/
module LossMetricsManager : {
    global type t;
    constr t create ();

   /**
    * # Description
    * Updates the loss from the incoming Tango packets sequence number.
    * 
    * # Parameters
    * self (t): self
    * sequence_num (int<<24>>): sequence number of packet
    * path_id (int<<3>>): the path on which the packet came
    * 
    * # Returns
    * metrics (int<<32>>): the calculated metrics
    **/
    fun int<<32>> update_loss (
        t self,
        int<<24>> sequence_num,
        int<<3>> path_id
    ) [start <= self; end self];
}
{
    type t = {
        Counter.t<<6>> loss_counts0;
        Counter.t<<6>> loss_counts1;
        Counter.t<<6>> loss_counts2;
        Counter.t<<6>> loss_counts3;
        Counter.t<<6>> loss_counts4;
        Counter.t<<6>> loss_counts5;
        Counter.t<<6>> loss_counts6;
        Counter.t<<6>> loss_counts7;
        PairArray.t<<24>> loss_tracker;
        Array.t<<32>> loss_avgs;
    }

    constr t create () = {
        loss_counts0 = Counter.create(0);
        loss_counts1 = Counter.create(0);
        loss_counts2 = Counter.create(0);
        loss_counts3 = Counter.create(0);
        loss_counts4 = Counter.create(0);
        loss_counts5 = Counter.create(0);
        loss_counts6 = Counter.create(0);
        loss_counts7 = Counter.create(0);
        loss_tracker = PairArray.create(8);
        loss_avgs = Array.create(8);
    };

    /**
     * # Description
     * Update the loss corresponding to the difference in expected
     * sequence numebrs.
     **/
    memop update_loss (
        int<<'sz>> curr_seq_num,
        int<<'sz>> curr_loss,
        int<<'sz>> new_seq_num,
        int<<'sz>> avg_counter
    ) {
        bool should_reset = avg_counter > 62;
        bool has_possible_loss = curr_seq_num < new_seq_num;

        if (true) { cell1 = new_seq_num; }

        if (should_reset) {
            cell2 = 0;
        } else {
            if (has_possible_loss) {
                cell2 = curr_loss + 1; // FIXME
            }
        }

        if (true) { return cell2; }
    }

    fun int<<32>> update_loss (
        t self,
        int<<24>> sequence_num,
        int<<3>> path_id
    ) {
        // Update loss counters
        int<<24>> curr_cnt = 0;
        match path_id with
        | 0 -> { curr_cnt = (int<<24>>) Counter.add(self#loss_counts0, 1) + 1; }
        | 1 -> { curr_cnt = (int<<24>>) Counter.add(self#loss_counts1, 1) + 1; }
        | 2 -> { curr_cnt = (int<<24>>) Counter.add(self#loss_counts2, 1) + 1; }
        | 3 -> { curr_cnt = (int<<24>>) Counter.add(self#loss_counts3, 1) + 1; }
        | 4 -> { curr_cnt = (int<<24>>) Counter.add(self#loss_counts4, 1) + 1; }
        | 5 -> { curr_cnt = (int<<24>>) Counter.add(self#loss_counts5, 1) + 1; }
        | 6 -> { curr_cnt = (int<<24>>) Counter.add(self#loss_counts6, 1) + 1; }
        | 7 -> { curr_cnt = (int<<24>>) Counter.add(self#loss_counts7, 1) + 1; }

        // Calculate loss and updated last seen sequence number
        int<<32>> loss = (int<<32>>) PairArray.update(
            self#loss_tracker,
            path_id,
            update_loss,
            sequence_num,
            curr_cnt,
            0
        );

        // Update average loss
        if (curr_cnt >= 63) {
            Array.set(self#loss_avgs, path_id, loss);
            return (int<<32>>) loss[31:6];
        } else {
            int<<32>> avg = Array.get(self#loss_avgs, path_id);
            return (int<<32>>) avg[31:6];
        }
    }
}
