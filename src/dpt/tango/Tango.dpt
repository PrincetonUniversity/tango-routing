include "Time.dpt"
include "Types.dpt"
include "static_maps/EncodingMap.dpt"
include "static_maps/TrafficClassConstraintMap.dpt"
include "static_maps/TrafficClassMap.dpt"
include "static_maps/TrafficClassOpmizationMap.dpt"
include "static_maps/TunnelHeaderMap.dpt"
include "store_managers/InvalidPacketManager.dpt"
include "store_managers/RerouteManager.dpt"
include "store_managers/RouteManager.dpt"
include "store_managers/SequenceNumberManager.dpt"
include "store_managers/cryptography/encryption/Decryptor.dpt"
include "store_managers/cryptography/encryption/Encryptor.dpt"
include "store_managers/cryptography/signatures/BookSignatureManager.dpt"
include "store_managers/cryptography/signatures/MetricSignatureManager.dpt"
include "store_managers/metrics/BestMetricsManager.dpt"
include "store_managers/metrics/DelayMetricsManager.dpt"
include "store_managers/metrics/LossMetricsManager.dpt"
include "store_managers/metrics/MetricAverageTracker.dpt"

/* ================================================================================================================== *
 *                                                     EXTERNS                                                        *
 * ================================================================================================================== */

const int<<9>> out_peer_port = 1;
const int<<9>> out_port = 2;

/* ================================================================================================================== *
 *                                                     GLOBALS                                                        *
 * ================================================================================================================== */

// Decrypt path updates using one-time pads
global Decryptor.t decryptor = Decryptor.create();

// Keep track of the traffic class to physical path ID mappings
global RouteManager.t route_manager = RouteManager.create();

// Counter keeping track of tango sequence numbers w.r.t. outgoing flow packets
global SequenceNumberManager.t sequence_counters = SequenceNumberManager.create();

// Provide read access to precomputed 1-bit signatures derived from sequence numbers for validation
global BookSignatureManager.t incoming_book_signature_manager = BookSignatureManager.create();

// Provide read access to precomputed timestamp + path ID signatures for validation
global MetricSignatureManager.t incoming_metric_signature_manager = MetricSignatureManager.create();

// Provide read access to precomputed 1-bit signatures derived from sequence numbers
global BookSignatureManager.t outgoing_book_signature_manager = BookSignatureManager.create();

// Provide read access to precomputed timestamp + path ID signatures
global MetricSignatureManager.t outgoing_metric_signature_manager = MetricSignatureManager.create();

// Keep track of the number of packets seen on each path
global MetricAverageTracker.t metric_avg_tracker = MetricAverageTracker.create();

// Keep track of loss metrics of paths from peer
global LossMetricsManager.t loss_metrics_manager = LossMetricsManager.create();

// Keep track of delay metrics of paths from peer
global DelayMetricsManager.t delay_metrics_manager = DelayMetricsManager.create();

// Keep track of invlaid packets found
global InvalidPacketManager.t invalid_pkt_manager = InvalidPacketManager.create();

// Keep track of the most performant paths
global BestMetricsManager.t best_metrics_manager = BestMetricsManager.create();

// Test if a reroute should be issued
global RerouteManager.t reroute_manager = RerouteManager.create();

// Encrypt path updates using one-time pads
global Encryptor.t encryptor = Encryptor.create();

/* ================================================================================================================== *
 *                                                     EVENTS                                                         *
 * ================================================================================================================== */

/**
 * # Description
 * Application packet tunneled through system.
 * 
 * # Parameters
 * eth_header (`EthernetHeader_t`): ethernet frame header
 * ip_header (`IPv4Header_t`): IPv4 header of incoming packet
 * five_tuple (`FiveTuple_t`): five-tuple describing flow
 *
 * # Generates
 * forward_tango_traffic: flow packet wrapped with tango data sent to peer node
 * complete_forward: not tango traffic
 **/
entry event forward_flow (
    EthernetHeader_t eth_header,
    IPv4Header_t ip_header,
    TCPHeader_t tcp_header
) [
    route_manager < sequence_counters;
    sequence_counters < outgoing_book_signature_manager;
    outgoing_book_signature_manager < outgoing_metric_signature_manager
];

/**
 * # Description
 * Application packet to tunnel out of system.
 * 
 * # Parameters
 * eth_header (`EthernetHeader_t`): ethernet frame header
 * ip_header (`IPv4Header_t`): IPv4 header of incoming packet
 **/
exit event complete_forward (
    EthernetHeader_t eth_header,
    IPv4Header_t ip_header
);

/**
 * # Description
 * Incoming Tango data traffic from peer node.
 * 
 * # Parameters
 * tango_eth_header (EthernetHeader_t): tunneled ethernet frame header
 * tango_ip_header (IPv6Header_t): tango tunnel IPv6 header
 * tango_metrics_header (TangoHeader_t): tango metric data and signatures
 * encaped_ip_header (IPv4Header_t): flow IPv4 header tunneled thrpugh path
 * encaped_five_tuple (FiveTuple_t): five-tuple of tunneled packet
 *
 * # Generates
 * request_route_update: sometimes responds to peer with route mapping update
 * complete_forward: forwards the packet on to its final destination
 **/
event incoming_tango_traffic ( 
    EthernetHeader_t tango_eth_header,
    IPv6Header_t tango_ip_header,
    TangoHeader_t tango_metrics_header,
    IPv4Header_t encaped_ip_header,
    TCPHeader_t encaped_tcp_header
) [
    incoming_book_signature_manager < incoming_metric_signature_manager;
    incoming_metric_signature_manager < invalid_pkt_manager;
    incoming_metric_signature_manager < metric_avg_tracker;
    metric_avg_tracker < loss_metrics_manager;
    loss_metrics_manager < delay_metrics_manager;
    delay_metrics_manager < best_metrics_manager;
    best_metrics_manager < encryptor
];

/**
 * # Description
 * Tell peer to update a given route mapping for a traffic class.
 * 
 * # Parameters
 * eth_header (EthernetHeader_t): ethernet header to go back to peer
 * ip_header (IPv6Header_t): ip header corresponding to a given path
 * sequence_num (int<<4>>): sequence number corresponding to update
 * update_lo (int<<32>>): encrypted version of the update lower order bits
 * update_hi (int<<32>>): encrypted version of the update higher order bits
 **/
event route_update (
    EthernetHeader_t eth_header,
    IPv6Header_t ip_header,
    int<<8>> sequence_num,
    int<<32>> update_lo,
    int<<32>> update_hi
) [
    decryptor < reroute_manager
];

/* ================================================================================================================== *
 *                                                    HANDLERS                                                        *
 * ================================================================================================================== */

handle forward_flow (EthernetHeader_t eth_header, IPv4Header_t ip_header, TCPHeader_t tcp_header) {

    /* 1. Map flow to a specific physical route. */
    // -- Map flow to traffic class.
    int<<4>> traffic_class = map_flow_to_traffic_class(
        ip_header#src_address,
        tcp_header#src_port,
        ip_header#dest_address,
        tcp_header#dest_port,
        ip_header#protocol
    );

    // -- Ignore if not tango traffic
    if (traffic_class == 15) {
        event tunneled = complete_forward (eth_header, ip_header);
        generate_port (out_port, tunneled);
    } else {

    // -- Find route cooresponding to traffic class.
    int<<3>> path_id = RouteManager.get_path_id(route_manager, traffic_class);

    // -- Get physical path header to tunnel with.
    IPv6Header_t tango_tunnel_hdr = map_path_to_tunnel_header(path_id);


    /* 2. Increment and sign sequence number. */
    // -- Get updated sequence number
    int<<24>> seq_number = SequenceNumberManager.increment(sequence_counters, path_id);

    // -- Get signature corresponding to sequence number
    int<<1>> book_signature = BookSignatureManager.sign(outgoing_book_signature_manager, seq_number, path_id);

    /* 3. Record and sign path-specific timestamp. */
    // -- Get current time in milliseconds
    int<<12>> timestamp = get_time_now_ms();

    // -- Get precomputed path-specific signature
    int<<32>> ts_signature = MetricSignatureManager.sign(outgoing_metric_signature_manager, timestamp, path_id);


    /* 4. Encapsulate and forward packet. */
    TangoHeader_t tango_metrics_hdr = {
        path_id = (int<<8>>) path_id;
        timestamp = (int<<16>>) timestamp;
        signature = ts_signature;
        sequence_num = seq_number;
        book_signature = (int<<8>>) book_signature;
    };

    event forward_tango_pkt = incoming_tango_traffic (
        eth_header,
        { tango_tunnel_hdr with payload_len = 88 + ip_header#len },
        tango_metrics_hdr,
        ip_header,
        tcp_header
    );

    printf("Encapsulating packet with: { path_id: %d, timestamp: %d, ts_signature: %d, seq_number: %d, book_signature: %d }",
        path_id,
        timestamp,
        ts_signature,
        seq_number,
        book_signature
    );

    generate_port (out_peer_port, forward_tango_pkt);
}}

handle incoming_tango_traffic (
    EthernetHeader_t tango_eth_header,
    IPv6Header_t tango_ip_header,
    TangoHeader_t tango_metrics_header,
    IPv4Header_t encaped_ip_header,
    TCPHeader_t encaped_tcp_header
) {

    /* 1. Validate signatures. */
    // -- Skip if not tango traffic
    int<<4>> traffic_class = map_flow_to_traffic_class(
        encaped_ip_header#src_address,
        encaped_tcp_header#src_port,
        encaped_ip_header#dest_address,
        encaped_tcp_header#dest_port,
        encaped_ip_header#protocol
    );

    if (traffic_class == 15) {
        event tunneled = complete_forward (tango_eth_header, encaped_ip_header);
        generate_port (out_port, tunneled);
    } else {
    // -- Verify
    bool is_valid_seq_num = BookSignatureManager.verify(
        incoming_book_signature_manager,
        tango_metrics_header#sequence_num,
        tango_metrics_header#path_id[2:0],
        tango_metrics_header#book_signature[0:0]
    );

    bool is_valid_metrics = MetricSignatureManager.verify(
        incoming_metric_signature_manager,
        tango_metrics_header#timestamp[11:0],
        tango_metrics_header#path_id[2:0],
        tango_metrics_header#signature
    );

    // TODO: Verify `path_id` matches expected header metadata

    // -- Record and bail if invalid
    if (!is_valid_seq_num || !is_valid_metrics) {
        printf("Invalid incoming packet found: { reason: { seq_num: %b, ts: %b } path_id: %d, timestamp: %d, ts_signature: %d, seq_number: %d, book_signature: %d }",
            is_valid_seq_num,
            is_valid_metrics,
            tango_metrics_header#path_id[2:0],
            tango_metrics_header#timestamp[11:0],
            tango_metrics_header#signature,
            tango_metrics_header#sequence_num,
            tango_metrics_header#book_signature[0:0]
        );

        InvalidPacketManager.found_invalid_packet(
            invalid_pkt_manager,
            tango_metrics_header#path_id[2:0]
        );
    } else {

        /* 2. Update Metrics. */
        // -- Get the current number of packets seen on path
        int<<32>> avg_count = (int<<32>>) MetricAverageTracker.increment(
            metric_avg_tracker,
            tango_metrics_header#path_id[2:0]
        );

        // -- Update Loss
        int<<32>> loss_metrics = LossMetricsManager.update_loss(
            loss_metrics_manager,
            avg_count,
            tango_metrics_header#sequence_num,
            tango_metrics_header#path_id[2:0]
        );

        // -- Update delay
        int<<32>> delay_metrics = DelayMetricsManager.update_delay(
            delay_metrics_manager,
            avg_count,
            tango_metrics_header#timestamp[11:0],
            tango_metrics_header#path_id[2:0]
        );

        // -- Update best metrics
        BestMetrics_t best_metrics = BestMetricsManager.update(
            best_metrics_manager,
            tango_metrics_header#path_id[2:0],
            loss_metrics,
            delay_metrics
        );

        printf("Metrics for path %d updated: { loss: %d, delay: %d, best_loss_id: %d, best_delay_id: %d }",
            tango_metrics_header#path_id,
            loss_metrics,
            delay_metrics,
            best_metrics#best_loss_id,
            best_metrics#best_delay_id
        );

        event tunneled = complete_forward (tango_eth_header, encaped_ip_header);
        generate_port (out_port, tunneled);


        /* 3. Reroute if necessary. */
        // -- Do the metrics meet the hard routing constraints
        bool is_within_constraints = verify_metrics_within_constraints(
            traffic_class,
            loss_metrics,
            delay_metrics
        );

        // -- Trigger reroute if hard constraints are broken
        if (!is_within_constraints) {

        // -- Get optimization policy of traffic class
        bool policy = map_traffic_class_to_policy(traffic_class);

        // -- Prep new path id to route traffic class to
        int<<3>> new_path_id = 0;
        if (policy == OPTIMIZE_DELAY) {
            new_path_id = best_metrics#best_delay_id;
        } else {
            new_path_id = best_metrics#best_loss_id;
        }

        bool should_issue_reroute = RerouteManager.check_reroute(
            reroute_manager,
            traffic_class,
            new_path_id
        );

        // -- Trigger reroute if one has not already been issued
        if (should_issue_reroute) {

            printf("Triggering Reroute: { traffic_cls: %d, old_path_id: %d, new_path_id: %d }",
                traffic_class,
                tango_metrics_header#path_id,
                new_path_id
            );

            // -- Encrypt reroute request
            EncodedUpdate_t encoded_update = encode_update(new_path_id, traffic_class);

            TaggedCiphertext_t encrypted_update = Encryptor.encrypt(encryptor, encoded_update);

            // -- multicast reroute request
            for (request_path < NUM_VALID_PATHS) {
                IPv6Header_t path_hdr = map_path_to_tunnel_header((int<<3>>) size_to_int(request_path));

                int<<4>> update_seq_num = encrypted_update#seq_num_tag;
                event update = route_update (
                    tango_eth_header,
                    { path_hdr with payload_len = 72 },
                    (int<<8>>) update_seq_num,
                    encrypted_update#ciphertext_lo,
                    encrypted_update#ciphertext_hi
                );

                generate_port (out_peer_port, update);
            }
        }}
    }}
}

handle route_update (
    EthernetHeader_t eth_header,
    IPv6Header_t ip_header,
    int<<8>> sequence_num,
    int<<32>> update_lo,
    int<<32>> update_hi
) {

    /* 1. Decrypt and verify update. */
    TaggedCiphertext_t enc_update = {
        seq_num_tag = (int<<4>>) sequence_num;
        ciphertext_lo = update_lo;
        ciphertext_hi = update_hi;
    };

    // -- Decrypt
    EncodedUpdate_t plaintext = Decryptor.decrypt(decryptor, enc_update);

    RouteUpdate_t dec_update = decode_update(plaintext);

    // -- Verify
    if (dec_update#is_valid) {

        /* 2. Update route mapping. */
        RouteManager.update_route(
            route_manager,
            dec_update#traffic_class,
            dec_update#new_path_id
        );
    }
}
