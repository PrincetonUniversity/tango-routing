include "Time.dpt"
include "Types.dpt"
include "static_maps/TrafficClassMap.dpt"
include "static_maps/TunnelHeaderMap.dpt"
include "store_managers/InvalidPacketManager.dpt"
include "store_managers/RouteManager.dpt"
include "store_managers/SequenceNumberManager.dpt"

/* ================================================================================================================== *
 *                                                     EXTERNS                                                        *
 * ================================================================================================================== */

const int<<9>> out_peer_port = 1;
const int<<9>> out_port = 2;

/* ================================================================================================================== *
 *                                                     GLOBALS                                                        *
 * ================================================================================================================== */

// Keep track of the traffic class to physical path ID mappings
global RouteManager.t route_manager = RouteManager.create();

// Counter keeping track of tango sequence numbers w.r.t. outgoing flow packets
global SequenceNumberManager.t sequence_counters = SequenceNumberManager.create();

/* ================================================================================================================== *
 *                                                     EVENTS                                                         *
 * ================================================================================================================== */

/**
 * # Description
 * Application packet tunneled through system.
 * 
 * # Parameters
 * eth_header (`EthernetHeader_t`): ethernet frame header
 * ip_header (`IPv4Header_t`): IPv4 header of incoming packet
 * udp_header (`UDPHeader_t`): TCP header of incoming packet
 *
 * # Generates
 * forward_tango_traffic: flow packet wrapped with tango data sent to peer node
 * complete_forward: not tango traffic
 **/
entry event forward_flow (
    EthernetHeader_t eth_header,
    IPv4Header_t ip_header,
    UDPHeader_t udp_header
) [ route_manager < sequence_counters ];

/**
 * # Description
 * Incoming Tango data traffic from peer node.
 * 
 * # Parameters
 * tango_eth_header (EthernetHeader_t): tunneled ethernet frame header
 * tango_ip_header (IPv6Header_t): tango tunnel IPv6 header
 * tango_metrics_header (TangoHeader_t): tango metric data and signatures
 * encaped_ip_header (IPv4Header_t): flow IPv4 header tunneled thrpugh path
 * encapedencaped_udp_header_tcp_header (UDPHeader_t): tcp header of tunneled packet
 *
 * # Generates
 * request_route_update: sometimes responds to peer with route mapping update
 * complete_forward: forwards the packet on to its final destination
 **/
exit event incoming_tango_traffic (
    EthernetHeader_t tango_eth_header,
    IPv6Header_t tango_ip_header,
    TangoHeader_t tango_metrics_header,
    IPv4Header_t encaped_ip_header,
    UDPHeader_t encaped_udp_header
);

/* ================================================================================================================== *
 *                                                    HANDLERS                                                        *
 * ================================================================================================================== */

handle forward_flow (EthernetHeader_t eth_header, IPv4Header_t ip_header, UDPHeader_t udp_header) {

    /* 1. Map flow to a specific physical route. */
    // -- Map flow to traffic class.
    int<<4>> traffic_class = map_flow_to_traffic_class(
        ip_header#src_address,
        udp_header#source_port,
        ip_header#dest_address,
        udp_header#destination_port,
        ip_header#protocol
    );

    // -- Find route cooresponding to traffic class.
    int<<3>> path_id = RouteManager.get_path_id(route_manager, traffic_class);

    // -- Get physical path header to tunnel with.
    IPv6Header_t tango_tunnel_hdr = map_path_to_tunnel_header(path_id);


    /* 2. Increment sequence number. */
    // -- Get updated sequence number
    int<<24>> seq_number = SequenceNumberManager.increment(sequence_counters, path_id);


    /* 3. Record path-specific timestamp. */
    // -- Get current time in milliseconds
    int<<12>> timestamp = get_time_now_ms();


    /* 4. Encapsulate and forward packet. */
    TangoHeader_t tango_metrics_hdr = {
        path_id = (int<<8>>) path_id;
        timestamp = (int<<16>>) timestamp;
        signature = 0;
        sequence_num = seq_number;
        book_signature = 0;
    };

    event forward_tango_pkt = incoming_tango_traffic (
        eth_header,
        { tango_tunnel_hdr with payload_len = 88 + ip_header#len },
        tango_metrics_hdr,
        ip_header,
        udp_header
    );

    printf("Generating: { path: %d, class %d, timestamp: %d, seq_num: %d }",
        path_id,
        traffic_class,
        timestamp,
        seq_number
    );

    generate_port (out_peer_port, forward_tango_pkt);
}
