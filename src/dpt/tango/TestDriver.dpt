include "Tango.dpt"
 
event populate_metric_sig (
    int<<3>> path_id,
    int<<12>> timestamp,
    int<<32>> signature
) {
    MetricSignatureManager.control_set(incoming_metric_signature_manager, path_id, timestamp, signature);
    MetricSignatureManager.control_set(outgoing_metric_signature_manager, path_id, timestamp, signature);
}

event populate_book_sig (
    int<<24>> seq_number,
    int<<3>> path_id,
    int<<1>> signature
) {
    BookSignatureManager.control_set(incoming_book_signature_manager, seq_number, path_id, signature);
    BookSignatureManager.control_set(outgoing_book_signature_manager, seq_number, path_id, signature);
}

event populate_encrypt_pads (
    int<<4>> sequence_num,
    int<<64>> otp
) {
    EncryptionManager.control_set_encrypt(incoming_encryption_manager, sequence_num, otp);
    EncryptionManager.control_set_encrypt(outgoing_encryption_manager, sequence_num, otp);
}

event populate_decypt_pads (
    int<<4>> sequence_num,
    int<<64>> otp
) {
    EncryptionManager.control_set_decrypt(incoming_encryption_manager, sequence_num, otp);
    EncryptionManager.control_set_decrypt(outgoing_encryption_manager, sequence_num, otp);
}

event populate_traffic_cls_enc (
    int<<4>> traffic_class,
    int<<28>> enc
) {
    EncryptionManager.control_set_traffic_enc(incoming_encryption_manager, traffic_class, enc);
    EncryptionManager.control_set_traffic_enc(outgoing_encryption_manager, traffic_class, enc);
}

event populate_path_enc (
    int<<3>> path_id,
    int<<29>> enc
) {
    EncryptionManager.control_set_path_enc(incoming_encryption_manager, path_id, enc);
    EncryptionManager.control_set_path_enc(outgoing_encryption_manager, path_id, enc);
}