/**
 * # Description
 * The ethernet header of a packet.
 *
 * # Properties
 * dest_mac (int<<48>>): destination MAC address
 * src_mac (int<<48>>): source MAC address
 * ethertype (int<<16>>): ethernet type
 **/
type EthernetHeader_t = {
   int<<48>> dest_mac; 
   int<<48>> src_mac; 
   int<<16>> ethertype;
}


/**
 * # Description
 * The ipv4 header describing a packet source and destination.
 *
 * # Properties
 * version_ihl (int<<8>>): IP protocol version and length of the header
 * type_of_svc (int<<8>>): expected service for packet delivery
 * len (int<<16>>): length of entire packet
 * id (int<<16>>): ID used for fragmented packet reconstruction
 * flags_fragment_offset (int<<16>>): if fragmented and position of fragment
 * ttl (int<<8>>): time to live
 * protocol (int<<8>>): transmission protocol
 * checksum (int<<16>>): checksum of header
 * src_addr (int<<32>>): IPv4 address of sender
 * dest_addr (int<<32>>): IPv4 address of receiver
 **/
type IPv4Header_t = {
   int<<8>>  version_ihl;
   int<<8>>  type_of_svc;
   int<<16>> len;
   int<<16>> id;
   int<<16>> flags_fragment_offset;
   int<<8>>  ttl;
   int<<8>>  protocol;
   int<<16>> checksum;
   int<<32>> src_address;
   int<<32>> dest_address;
}

/**
 * # Description
 * The ipv6 header describing a packet source and destination.
 *
 * # Properties
 * version (int<<4>>): receiver ip version
 * traffic_class (int<<8>>): ip traffic class, not tango 
 * flow_label (int<<20>>): signal to maintain flow on same path
 * payload_len (int<<16>>): size of payload in octets
 * next_header (int<<8>>): next header type (protocol)
 * hop_limit (int<<8>>): time to live
 * src_addr (int<<128>>): IPv6 address of sender
 * dest_addr (int<<128>>): IPv6 address of receiver
 **/
type IPv6Header_t = {
   // int<<4>>   version;
   // int<<8>>   traffic_class;
   // int<<20>>  flow_label;
   int<<32>>  version_cls_flow;
   int<<16>>  payload_len;
   int<<8>>   next_header;
   int<<8>>   hop_limit;
   int<<64>> src_addr_hi;
   int<<64>> src_addr_lo;
   int<<64>> dest_addr_hi;
   int<<64>> dest_addr_lo;
}

/**
 * # Description
 * A five-tuple describing a particular flow.
 *
 * # Properties
 * src_addr (int<<32>>): IPv4 address of sender
 * dest_addr (int<<32>>): IPv4 address of receiver
 * src_port (int<<16>>): originating port
 * dest_port (int<<16>>): receiving port
 * protocol (int<<8>>): protocol of connection
 **/
// type FiveTuple_t = {
//    int<<32>> src_addr;
//    int<<32>> dest_addr;
//    int<<16>> src_port;
//    int<<16>> dest_port;
//    int<<8>>  protocol;
// }

/**
 * # Desctiption 
 * TCP Header describing host source and destination ports.
 *
 * # Properties
 * src_port (int<<16>>): host source port
 * dest_port (int<<16>>): host destination port
 * sequence_num (int<<32>>): sequence number associated with flow
 * ack_num (int<<32>>): acknowledgement number associated with flow
 * len_flags (int<<16>>): length of header + header flags
 * window_sz (int<<16>>): recieve window size
 * checksum (int<<16>>): checksum of the header
 * urg_ptr (int<<16>>): last urgent data break
 **/
type TCPHeader_t = {
   int<<16>> src_port;
   int<<16>> dest_port;
   int<<32>> sequence_num;
   int<<32>> ack_num;
   int<<16>> len_flags;
   int<<16>> window_sz;
   int<<16>> checksum;
   int<<16>> urg_ptr;
}

/**
 * # Desctiption 
 * UDP Header describing host source and destination ports.
 *
 * # Properties
 * src_port (int<<16>>): host source port
 * dest_port (int<<16>>): host destination port
 * length (int<<16>>): length of payload
 * checksum (int<<16>>): checksum of the header
 **/
type UDPHeader_t = {
   int<<16>> source_port;
   int<<16>> destination_port;
   int<<16>> length;
   int<<16>> checksum;
}

/**
 * # Description
 * The ipv6 header describing a packet source and destination.
 *
 * # Properties
 * path_id (int<<3>>): path id packet is to or should have take(n)
 * timestamp (int<<12>>): timestamp of when packet left peer
 * signature (int<<32>>): signature of the path ID and timestamp
 * sequence_num (int): Tango-specific sequence number
 * book_signature (int<<1>>): signature of the sequence number
 **/
type TangoHeader_t = {
   int<<8>>   path_id;
   int<<16>>  timestamp;
   int<<32>>  signature;
   int<<16>>  sequence_num;
   int<<8>>   book_signature;
}

/**
 * # Description
 * Route Update which is able to be en- and decrypted.
 *
 * # Properties
 * traffic_class (int<<4>>): traffic class to update
 * new_path_id (int<<3>>): physical path ID to update mapping to
 **/
type RouteUpdate_t = {
   int<<8>> traffic_class;
   int<<8>> new_path_id;
}

/**
 * # Description
 * Encrypted version of route update tagged with sequence number.
 *
 * # Properties
 * seq_num_tag (int<<4>>): sequence number corresponding to update
 * ciphertext_lo (int<<32>>): encrypted route mapping update lower order bits
 * ciphertext_hi (int<<32>>): encrypted route mapping update higher order bits
 **/
type TaggedCiphertext_t = {
   int<<4>> seq_num_tag;
   int<<32>> ciphertext_lo;
   int<<32>> ciphertext_hi;
}

/**
 * # Description
 * Encoded version of a route update.
 *
 * # Properties
 * encoding_lo (int<<32>>): encoded update lower order bits
 * encoding_hi (int<<32>>): encoded update higher order bits
 **/
type EncodedUpdate_t = {
   int<<32>> encoding_lo;
   int<<32>> encoding_hi;
}

/**
 * # Description
 * Best metrics over all paths.
 *
 * # Properties
 * best_delay_id (int<<3>>): path id of best delay path
 * best_loss_id (int<<3>>): path id of best loss path
 **/
type BestMetrics_t = {
   int<<3>> best_delay_id;
   int<<3>> best_loss_id;
}
