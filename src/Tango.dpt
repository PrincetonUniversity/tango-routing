include "Types.dpt"
include "store_managers/RouteManager.dpt"
include "store_managers/MetricSignatureManager.dpt"
include "store_managers/BookSignatureManager.dpt"
include "store_managers/DelayMetricsManager.dpt"
include "store_managers/InvalidPacketManager.dpt"
include "store_managers/EncryptionManager.dpt"

/* ================================================================== *
 *                               GLOBALS                              *
 * ================================================================== */

// Counter keeping track of tango sequence numbers w.r.t. outgoing flow packets
global Counter.t<<20>> sequence_counter = Counter.create(0);

// Array keeping track of the 5-tuple to traffic class mappings
global Array.t<</* TODO */>> traffic_classes = Array.create(/* TODO */);

// Keep track of the traffic class to physical path ID mappings
global RouteManager.t<</* TODO */, /* TODO */, /* TODO */>> route_manager = RouteManager.create();

// Static mapping of physical path IDs to Tango UDP Headers (Read-Only)
/* FIXME: symbolic or global or how to specify */

// Provide read access to precomputed timestamp + path ID signatures
global MetricSignatureManager.t<</* TODO */, /* TODO */, /* TODO */, /* TODO */>> metric_signature_manager = MetricSignatureManager.create();

// Provide read access to precomputed 1-bit signatures derived from sequence numbers
global BookSignatureManager.t<</* TODO */, /* TODO */>> book_signature_manager = BookSignatureManager.create()

// Keep track of delay metrics of paths from peer
global DelayMetricsManager.t<</* TODO */, /* TODO */, /* TODO */, /* TODO */, /* TODO */>> delay_metrics_manager = DelayMetricsManager.create()

// Keep track of loss metrics of paths from peer
global LossMetricsManager.t<</* TODO */, /* TODO */, /* TODO */, /* TODO */, /* TODO */>> loss_metrics_manager = LossMetricsManager.create()

// Keep track of invlaid packets found
global InvalidPacketManager.t<</* TODO */, /* TODO */, /* TODO */>> invalid_pkt_manager = InvalidPacketManager.create()

// Encrypt and decrypt path updates using one-time pads
global EncryptionManager.t<</* TODO */, /* TODO */, /* TODO */, /* TODO */, /* TODO */>> encryption_manager = EncryptionManager.create()

/* ================================================================== *
 *                               EVENTS                               *
 * ================================================================== */

// TODO: Do we want separate entry events for each type and a more complex harness or a top level ingress?
/*
 * Event signifying application flow data packet to forward to peer Tango node.
 * 
 * PARAMETERS
 * ----------
 * src (int): the source IP address
 * dest (int): the destination IP address
 * src_port (int<<9>>): the source IP address
 * dest_port (int<<9>>): the destination IP address
 * protocol (int<<8>>): the protocol used by tango flow
 * header (IpHeader): the full header of packet, to forward once at other switch
 *
 * GENERATES
 * ---------
 * incoming_tango_traffic: flow packet wrapped with tango data sent to peer node
 */
entry event forward_flow (
    int src,
    int dest,
    int<<9>> src_port,
    int<<9>> dest_port,
    int<<8>> protocol,
    IpHeader header
);

/*
 * Incoming Tango data traffic from peer node.
 * 
 * PARAMETERS
 * ----------
 * path_id (int<<6>>): the physical path ID taken by the packet
 * timestamp (int): the timestamp when the packet left peer
 * metric_signature (int<<256>>): signature of the path_id and timestamp
 * sequence_num (int<<20>>): the tango packet sequence number
 * book_signature (int<<1>>): the one-bit signature in book corresponding to sequence number
 * header (IpHeader): the full header of packet, to forward once at other switch
 *
 * GENERATES
 * ---------
 * route_update: sometimes responds to peer that they should update route due to changed metrics
 * complete_forward: forwards the packet on to its final destination
 * FIXME: fix the number of bits
 */
event incoming_tango_traffic (
    int<</* TODO */>> path_id,
    int timestamp,
    int<<256>> metric_signature,
    int<<20>> sequence_num,
    int<<1> book_signature,
    IpHeader forwarded_header
);

/*
 * Peer says to update a given route mapping for a traffic class
 * 
 * PARAMETERS
 * ----------
 * update (int<<64>>): encrypted version of the update
 */
event route_update (int<<64>> update);

/*
 * Forward the flow using tango to its final destination.
 * 
 * PARAMETERS
 * ----------
 * header (IpHeader): the full header of packet, to re-encapsulte
 */
exit event complete_forward (IpHeader header);

/* ================================================================== *
 *                              HANDLERS                              *
 * ================================================================== */

handle forward_flow (
    int src,
    int dest,
    int<<9>> src_port,
    int<<9>> dest_port,
    int<<8>> protocol,
    IpHeader header
) {
    /* TODO */
}

handle incoming_tango_traffic (
    int<</* TODO */>> path_id,
    int timestamp,
    int<<256>> metric_signature,
    int<<20>> sequence_num,
    int<<1> book_signature,
    IpHeader forwarded_header
) {
    /* TODO */
}

handle route_update (int<<64>> update) {
    /* TODO */
}
