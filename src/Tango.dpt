include "Types.dpt"
include "store_managers/RouteManager.dpt"
include "store_managers/TangoHeaderManager.dpt"
include "store_managers/MetricSignatureManager.dpt"
include "store_managers/BookSignatureManager.dpt"
// include "store_managers/DelayMetricsManager.dpt"
// include "store_managers/LossMetricsManager.dpt"
// include "store_managers/InvalidPacketManager.dpt"
// include "store_managers/EncryptionManager.dpt"

/* ================================================================== *
 *                                SIZES                               *
 * ================================================================== */

symbolic size path_id_sz;
symbolic size signature_sz;
symbolic size seq_num_sz;
symbolic size traffic_cls_sz;
symbolic size num_timestamps;
// TODO

/* ================================================================== *
 *                               GLOBALS                              *
 * ================================================================== */

// Counter keeping track of tango sequence numbers w.r.t. outgoing flow packets
global Counter.t<<seq_num_sz>> sequence_counter = Counter.create(0);

// Array keeping track of the 5-tuple to traffic class mappings
// global Array.t<<>> traffic_classes = Array.create();

// Keep track of the traffic class to physical path ID mappings
global RouteManager.t<<traffic_cls_sz, path_id_sz>> route_manager = RouteManager.create(0); // FIXME: size

// Static mapping of physical path IDs to Tango UDP Headers (Read-Only)
global TangoHeaderManager.t<<path_id_sz>> header_manager = TangoHeaderManager.create(0); // FIXME: size

// Provide read access to precomputed timestamp + path ID signatures
global MetricSignatureManager.t<<num_timestamps, path_id_sz, signature_sz>> metric_signature_manager = MetricSignatureManager.create(0); // FIXME: size

// Provide read access to precomputed 1-bit signatures derived from sequence numbers
global BookSignatureManager.t<<seq_num_sz>> book_signature_manager = BookSignatureManager.create(0); // FIXME: size

// Keep track of delay metrics of paths from peer
/*global DelayMetricsManager.t<<,,,,>> delay_metrics_manager = DelayMetricsManager.create();

// Keep track of loss metrics of paths from peer
global LossMetricsManager.t<<,,,,>> loss_metrics_manager = LossMetricsManager.create();

// Keep track of invlaid packets found
global InvalidPacketManager.t<<,,>> invalid_pkt_manager = InvalidPacketManager.create();

// Encrypt and decrypt path updates using one-time pads
global EncryptionManager.t<<,,,,>> encryption_manager = EncryptionManager.create()*/

/* ================================================================== *
 *                               EVENTS                               *
 * ================================================================== */

/*
 * Event signifying application flow data packet to forward to peer Tango node.
 * 
 * PARAMETERS
 * ----------
 * eth_header (`EthernetHeader_t`): ethernet frame header
 * ip_header (`IPv4Header_t`): IPv4 header of incoming packet
 * five_tuple (`FiveTuple_t`): five-tuple describing flow
 *
 * GENERATES
 * ---------
 * incoming_tango_traffic: flow packet wrapped with tango data sent to peer node
 */
entry event forward_flow (EthernetHeader_t eth_header, IPv4Header_t ip_header, FiveTuple_t five_tuple);

/*
 * Incoming Tango data traffic from peer node.
 * 
 * PARAMETERS
 * ----------
 * tango_eth_header (EthernetHeader_t): tango tunnel ethernet frame header
 * tango_ip_header (IPv6Header_t): tango tunnel IPv6 header
 * tango_metrics_header (TangoHeader_t<<path_id_sz, signature_sz, seq_num_sz>>): tango metric data and signatures
 * encaped_eth_header (EthernetHeader_t): flow ethernet header tunneled through path
 * encaped_ip_header (IPv4Header_t): flow IPv4 header tunneled thrpugh path
 *
 * GENERATES
 * ---------
 * route_update: sometimes responds to peer that they should update route due to changed metrics
 * complete_forward: forwards the packet on to its final destination
 */
event incoming_tango_traffic (EthernetHeader_t tango_eth_header, IPv6Header_t tango_ip_header, TangoHeader_t<<path_id_sz, signature_sz, seq_num_sz>> tango_metrics_header, EthernetHeader_t encaped_eth_header, IPv4Header_t encaped_ip_header);

/*
 * Peer says to update a given route mapping for a traffic class
 * 
 * PARAMETERS
 * ----------
 * update (int<<64>>): encrypted version of the update
 */
event route_update (int<<64>> update);

/*
 * Forward the flow using tango to its final destination.
 * 
 * PARAMETERS
 * ----------
 * ethernet_header (EthernetHeader_t): ethernet header of original packet, to re-encapsulate
 * ip_header (IPv4Header_t): the full ip header of packet, to re-encapsulte
 */
exit event complete_forward (EthernetHeader_t ethernet_header, IPv4Header_t ip_header);

/* ================================================================== *
 *                              HANDLERS                              *
 * ================================================================== */

handle forward_flow (EthernetHeader_t eth_header, IPv4Header_t ip_header, FiveTuple_t five_tuple) {
    printf("ERROR: hander `forward_flow` is *unimplemented*");
    // TODO
}

handle incoming_tango_traffic (EthernetHeader_t tango_eth_header, IPv6Header_t tango_ip_header, TangoHeader_t<<path_id_sz, signature_sz, seq_num_sz>> tango_metrics_header, EthernetHeader_t encaped_eth_header, IPv4Header_t encaped_ip_header) {
    printf("ERROR: hander `incoming_tango_traffic` is *unimplemented*");
    // TODO
}

handle route_update (int<<64>> update) {
    printf("ERROR: hander `route_update` is *unimplemented*");
    // TODO
}
