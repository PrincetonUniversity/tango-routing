include "Time.dpt"
include "Types.dpt"
include "static_maps/TrafficClassConstraintMap.dpt"
include "static_maps/TrafficClassMap.dpt"
include "static_maps/TrafficClassOpmizationMap.dpt"
include "static_maps/TunnelHeaderMap.dpt"
include "store_managers/InvalidPacketManager.dpt"
include "store_managers/RouteManager.dpt"
include "store_managers/SequenceNumberManager.dpt"
include "store_managers/cryptography/encryption/EncryptionManager.dpt"
include "store_managers/cryptography/signatures/BookSignatureManager.dpt"
include "store_managers/cryptography/signatures/MetricSignatureManager.dpt"
include "store_managers/metrics/BestMetricsManager.dpt"
include "store_managers/metrics/DelayMetricsManager.dpt"
include "store_managers/metrics/LossMetricsManager.dpt"

/* ================================================================================================================== *
 *                                                     EXTERNS                                                        *
 * ================================================================================================================== */

symbolic int out_peer_port;
symbolic int out_port;

/* ================================================================================================================== *
 *                                                   CONSTANTS                                                        *
 * ================================================================================================================== */

// Ethernet header for all outgoing Tango traffic
const EthernetHeader_t TANGO_ETH_HDR = {
    dest_mac = 0;
    src_mac = 0;
    ethertype = 0;
};

/* ================================================================================================================== *
 *                                                     GLOBALS                                                        *
 * ================================================================================================================== */

// Decrypt path updates using one-time pads
global EncryptionManager.t incoming_encryption_manager = EncryptionManager.create();

// Keep track of the traffic class to physical path ID mappings
global RouteManager.t route_manager = RouteManager.create();

// Counter keeping track of tango sequence numbers w.r.t. outgoing flow packets
global SequenceNumberManager.t sequence_counters = SequenceNumberManager.create();

// Provide read access to precomputed 1-bit signatures derived from sequence numbers for validation
global BookSignatureManager.t incoming_book_signature_manager = BookSignatureManager.create();

// Provide read access to precomputed timestamp + path ID signatures for validation
global MetricSignatureManager.t incoming_metric_signature_manager = MetricSignatureManager.create();

// Provide read access to precomputed 1-bit signatures derived from sequence numbers
global BookSignatureManager.t outgoing_book_signature_manager = BookSignatureManager.create();

// Provide read access to precomputed timestamp + path ID signatures
global MetricSignatureManager.t outgoing_metric_signature_manager = MetricSignatureManager.create();

// Keep track of loss metrics of paths from peer
global LossMetricsManager.t loss_metrics_manager = LossMetricsManager.create();

// Keep track of delay metrics of paths from peer
global DelayMetricsManager.t delay_metrics_manager = DelayMetricsManager.create();

// Keep track of invlaid packets found
global InvalidPacketManager.t invalid_pkt_manager = InvalidPacketManager.create();

// Keep track of the most performant paths
global BestMetricsManager.t best_metrics_manager = BestMetricsManager.create();

// Encrypt path updates using one-time pads
global EncryptionManager.t outgoing_encryption_manager = EncryptionManager.create();

/* ================================================================================================================== *
 *                                                     EVENTS                                                         *
 * ================================================================================================================== */

/**
 * # Description
 * Event signifying application flow data packet to forward to peer Tango node.
 * 
 * # Parameters
 * eth_header (`EthernetHeader_t`): ethernet frame header
 * ip_header (`IPv4Header_t`): IPv4 header of incoming packet
 * five_tuple (`FiveTuple_t`): five-tuple describing flow
 *
 * # Generates
 * forward_tango_traffic: flow packet wrapped with tango data sent to peer node
 **/
entry event forward_flow (
    EthernetHeader_t eth_header,
    IPv4Header_t ip_header,
    FiveTuple_t five_tuple
);

/**
 * # Description
 * Tunneled Tango data traffic headed to peer node.
 * 
 * # Parameters
 * tango_eth_header (EthernetHeader_t): tango tunnel ethernet frame header
 * tango_ip_header (IPv6Header_t): tango tunnel IPv6 header
 * tango_metrics_header (TangoHeader_t): tango metric data and signatures
 * encaped_eth_header (EthernetHeader_t): flow ethernet header tunneled through path
 * encaped_ip_header (IPv4Header_t): flow IPv4 header tunneled thrpugh path
 **/
exit event forward_tango_traffic (
    EthernetHeader_t tango_eth_header,
    IPv6Header_t tango_ip_header,
    TangoHeader_t tango_metrics_header,
    EthernetHeader_t encaped_eth_header,
    IPv4Header_t encaped_ip_header
);

/**
 * # Description
 * Incoming Tango data traffic from peer node.
 * 
 * # Parameters
 * tango_eth_header (EthernetHeader_t): tunneled ethernet frame header
 * tango_ip_header (IPv6Header_t): tango tunnel IPv6 header
 * tango_metrics_header (TangoHeader_t): tango metric data and signatures
 * encaped_ip_header (IPv4Header_t): flow IPv4 header tunneled thrpugh path
 * encaped_five_tuple (FiveTuple_t): five-tuple of tunneled packet
 *
 * # Generates
 * request_route_update: sometimes responds to peer with route mapping update
 * complete_forward: forwards the packet on to its final destination
 **/
entry event incoming_tango_traffic ( 
    EthernetHeader_t tango_eth_header,
    IPv6Header_t tango_ip_header,
    TangoHeader_t tango_metrics_header,
    IPv4Header_t encaped_ip_header,
    FiveTuple_t encaped_five_tuple
);

/**
 * # Description
 * Peer says to update a given route mapping for a traffic class.
 * 
 * # Parameters
 * sequence_num (int<<4>>): sequence number corresponding to update
 * update (int<<64>>): encrypted version of the update
 **/
entry event incoming_route_update (int<<4>> sequence_num, int<<64>> update);

/**
 * # Description
 * Tell peer to update a given route mapping for a traffic class.
 * 
 * # Parameters
 * sequence_num (int<<4>>): sequence number corresponding to update
 * update (int<<64>>): encrypted version of the update
 **/
exit event request_route_update (int<<4>> sequence_num, int<<64>> update);

/**
 * # Description
 * Forward the flow using tango to its final destination.
 * 
 * # Parameters
 * ethernet_header (EthernetHeader_t): ethernet header of original packet, to re-encapsulate
 * ip_header (IPv4Header_t): the full ip header of packet, to re-encapsulte
 **/
exit event complete_forward (EthernetHeader_t ethernet_header, IPv4Header_t ip_header);

/* ================================================================================================================== *
 *                                                    HANDLERS                                                        *
 * ================================================================================================================== */

handle forward_flow (EthernetHeader_t eth_header, IPv4Header_t ip_header, FiveTuple_t five_tuple) {

    /* 1. Map flow to a specific physical route. */
    // -- Map flow to traffic class.
    int<<4>> traffic_class = map_flow_to_traffic_class(five_tuple);

    // -- Find route cooresponding to traffic class.
    int<<3>> path_id = RouteManager.get_path_id(route_manager, traffic_class);

    // -- Get physical path header to tunnel with.
    IPv6Header_t tango_tunnel_hdr = map_path_to_tunnel_header(path_id);


    /* 2. Increment and sign sequence number. */
    // -- Get updated sequence number
    int<<24>> seq_number = SequenceNumberManager.increment(sequence_counters, path_id);

    // -- Get signature corresponding to sequence number
    int<<1>> book_signature = BookSignatureManager.sign(outgoing_book_signature_manager, seq_number, path_id);

    /* 3. Record and sign path-specific timestamp. */
    // -- Get current time in milliseconds
    int<<12>> timestamp = get_time_now_ms();

    // -- Get precomputed path-specific signature
    int<<256>> ts_signature = MetricSignatureManager.sign(outgoing_metric_signature_manager, timestamp, path_id);


    /* 4. Encapsulate and forward packet. */
    TangoHeader_t tango_metrics_hdr = {
        path_id = path_id;
        timestamp = timestamp;
        signature = ts_signature;
        sequence_num = seq_number;
        book_signature = book_signature;
    };
     
    event forward_tango_pkt = forward_tango_traffic (
        TANGO_ETH_HDR,
        tango_tunnel_hdr,
        tango_metrics_hdr,
        eth_header,
        ip_header
    );

    printf("Encapsulating packet with: { path_id: %d, timestamp: %d, ts_signature: %d, seq_number: %d, book_signature: %d }",
        path_id,
        timestamp,
        ts_signature,
        seq_number,
        book_signature
    );

    generate_port (out_peer_port, forward_tango_pkt);
}

handle incoming_tango_traffic (
    EthernetHeader_t tango_eth_header,
    IPv6Header_t tango_ip_header,
    TangoHeader_t tango_metrics_header,
    IPv4Header_t encaped_ip_header,
    FiveTuple_t encaped_five_tuple
) {
    
    /* 1. Validate signatures. */
    // -- Verify
    bool is_valid_seq_num = BookSignatureManager.verify(
        incoming_book_signature_manager,
        tango_metrics_header#sequence_num,
        tango_metrics_header#path_id,
        tango_metrics_header#book_signature
    );

    bool is_valid_metrics = MetricSignatureManager.verify(
        incoming_metric_signature_manager,
        tango_metrics_header#timestamp,
        tango_metrics_header#path_id,
        tango_metrics_header#signature
    );

    // TODO: Verify `path_id` matches expected header metadata

    // -- Record and bail if invalid
    if (!(is_valid_seq_num && is_valid_metrics)) {
        printf("Invalid incoming packet found: { path_id: %d, timestamp: %d, ts_signature: %d, seq_number: %d, book_signature: %d }",
            tango_metrics_header#path_id,
            tango_metrics_header#timestamp,
            tango_metrics_header#signature,
            tango_metrics_header#sequence_num,
            tango_metrics_header#book_signature
        );
        InvalidPacketManager.found_invalid_packet(invalid_pkt_manager, tango_metrics_header#path_id);
    } else {

        /* 2. Update Metrics. */
        // -- Update Loss
        LossMetrics_t loss_metrics = LossMetricsManager.update_loss(
            loss_metrics_manager,
            tango_metrics_header#sequence_num,
            tango_metrics_header#path_id
        );

        // -- Update delay
        DelayMetrics_t delay_metrics = DelayMetricsManager.update_delay(
            delay_metrics_manager,
            tango_metrics_header#timestamp,
            tango_metrics_header#path_id
        );

        // -- Update best metrics
        BestMetrics_t best_metrics = BestMetricsManager.update(
            best_metrics_manager,
            tango_metrics_header#path_id,
            loss_metrics,
            delay_metrics
        );

        printf("Metrics for path %d updated: { { loss_sum: %d, loss_cnt: %d }, { delay_sum: %d, delay_cnt: %d }, { best_loss_id: %d, best_delay_id: %d } }",
            tango_metrics_header#path_id,
            loss_metrics#loss_count,
            loss_metrics#transmission_count,
            delay_metrics#delay_sum,
            delay_metrics#delay_count,
            best_metrics#best_loss_id,
            best_metrics#best_delay_id
        );

        event tunneled = complete_forward (tango_eth_header, encaped_ip_header);
        generate_port (out_port, tunneled);


        /* 3. Reroute if necessary. */
        // -- Do the metrics meet the hard routing constraints
        int<<4>> traffic_class = map_flow_to_traffic_class(encaped_five_tuple);
        bool is_within_constraints = verify_metrics_within_constraints(
            traffic_class,
            loss_metrics,
            delay_metrics
        );

        // -- Trigger reroute if hard constraints are broken
        if (!is_within_constraints) {

            // -- Get optimization policy of traffic class
            bool policy = map_traffic_class_to_policy(traffic_class);

            // -- Get new path id to route traffic class to
            int<<3>> new_path_id = 0;
            if (policy == OPTIMIZE_DELAY) {
                new_path_id = best_metrics#best_delay_id;
            } else {
                new_path_id = best_metrics#best_loss_id;
            }

            printf("Triggering Reroute: { traffic_cls: %d, old_path_id: %d, new_path_id: %d }",
                traffic_class,
                tango_metrics_header#path_id,
                new_path_id
            );

            // -- Encrypt reroute request
            TaggedCiphertext_t enc_update = EncryptionManager.encrypt(
                outgoing_encryption_manager,
                traffic_class,
                new_path_id
            );

            event update = request_route_update (
                enc_update#seq_num_tag,
                enc_update#ciphertext
            );
            generate_port (out_peer_port, update); // FIXME: Need to multicast
        }

    }
}

handle incoming_route_update (int<<4>> sequence_num, int<<64>> update) {

    /* 1. Decrypt and verify update. */
    // -- Decrypt
    RouteUpdate_t dec_update =
        EncryptionManager.decrypt(incoming_encryption_manager, sequence_num, update);

    // -- Verify
    if (dec_update#is_valid) {

        /* 2. Update route mapping. */
        RouteManager.update_route(route_manager, dec_update#traffic_class, dec_update#new_path_id);

    }
}
